
Practica12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000c2e  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  00000cec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ee  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  000024ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085f  00000000  00000000  00002cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c45  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <main>
  8a:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_19>:
		EEPROM_Write(posicion_actual,res);
		posicion_actual++;
	}
}

ISR(TIMER0_COMP_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
	
}
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <cero_en_bit>:
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
}


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <cero_en_bit+0xc>
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <cero_en_bit+0x8>
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	8f 27       	eor	r24, r31
}
  ba:	81 70       	andi	r24, 0x01	; 1
  bc:	08 95       	ret

000000be <hasta_tecla>:
void LCD_wait_flag(void);
void LCD_init(void);
void LCD_wr_string(volatile uint8_t *s);

uint8_t hasta_tecla()
{
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	60 97       	sbiw	r28, 0x10	; 16
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
	{4,5,5,13},
	{1,2,3,14},
	{10,0,11,15}};
	*/
	//Para teclado físico
	uint8_t regreso[4][4] = {
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	de 01       	movw	r26, r28
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <hasta_tecla+0x22>
		{4,5,5,13},
		{7,8,9,14},
		{10,0,11,15}};
	while(1)
	{
		for(int i=0;i<4;i++)
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	a5 c0       	rjmp	.+330    	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
		{
			PORTT = ~(1<<i);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	00 2e       	mov	r0, r16
  f4:	02 c0       	rjmp	.+4      	; 0xfa <hasta_tecla+0x3c>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <hasta_tecla+0x38>
  fe:	80 95       	com	r24
 100:	82 bb       	out	0x12, r24	; 18
			asm("nop");
 102:	00 00       	nop
			if(cero_en_bit(&PINT,4))
 104:	64 e0       	ldi	r22, 0x04	; 4
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 10e:	88 23       	and	r24, r24
 110:	f9 f0       	breq	.+62     	; 0x150 <hasta_tecla+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <hasta_tecla+0x58>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <hasta_tecla+0x5e>
 11c:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,4)){}
 11e:	64 e0       	ldi	r22, 0x04	; 4
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 128:	81 11       	cpse	r24, r1
 12a:	f9 cf       	rjmp	.-14     	; 0x11e <hasta_tecla+0x60>
 12c:	83 ed       	ldi	r24, 0xD3	; 211
 12e:	90 e3       	ldi	r25, 0x30	; 48
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <hasta_tecla+0x72>
 134:	00 c0       	rjmp	.+0      	; 0x136 <hasta_tecla+0x78>
 136:	00 00       	nop
				_delay_ms(50);
				return regreso[i][0];
 138:	00 0f       	add	r16, r16
 13a:	11 1f       	adc	r17, r17
 13c:	00 0f       	add	r16, r16
 13e:	11 1f       	adc	r17, r17
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e0 0f       	add	r30, r16
 14a:	f1 1f       	adc	r31, r17
 14c:	80 81       	ld	r24, Z
 14e:	79 c0       	rjmp	.+242    	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			}
			if(cero_en_bit(&PINT,5))
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 15a:	88 23       	and	r24, r24
 15c:	f9 f0       	breq	.+62     	; 0x19c <hasta_tecla+0xde>
 15e:	83 ed       	ldi	r24, 0xD3	; 211
 160:	90 e3       	ldi	r25, 0x30	; 48
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <hasta_tecla+0xa4>
 166:	00 c0       	rjmp	.+0      	; 0x168 <hasta_tecla+0xaa>
 168:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,5)){}
 16a:	65 e0       	ldi	r22, 0x05	; 5
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 174:	81 11       	cpse	r24, r1
 176:	f9 cf       	rjmp	.-14     	; 0x16a <hasta_tecla+0xac>
 178:	83 ed       	ldi	r24, 0xD3	; 211
 17a:	90 e3       	ldi	r25, 0x30	; 48
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <hasta_tecla+0xbe>
 180:	00 c0       	rjmp	.+0      	; 0x182 <hasta_tecla+0xc4>
 182:	00 00       	nop
				_delay_ms(50);
				return regreso[i][1];
 184:	00 0f       	add	r16, r16
 186:	11 1f       	adc	r17, r17
 188:	00 0f       	add	r16, r16
 18a:	11 1f       	adc	r17, r17
 18c:	e1 e0       	ldi	r30, 0x01	; 1
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	e0 0f       	add	r30, r16
 196:	f1 1f       	adc	r31, r17
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	53 c0       	rjmp	.+166    	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			}
			if(cero_en_bit(&PINT,6))
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 1a6:	88 23       	and	r24, r24
 1a8:	f9 f0       	breq	.+62     	; 0x1e8 <hasta_tecla+0x12a>
 1aa:	83 ed       	ldi	r24, 0xD3	; 211
 1ac:	90 e3       	ldi	r25, 0x30	; 48
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <hasta_tecla+0xf0>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <hasta_tecla+0xf6>
 1b4:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,6)){}
 1b6:	66 e0       	ldi	r22, 0x06	; 6
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 1c0:	81 11       	cpse	r24, r1
 1c2:	f9 cf       	rjmp	.-14     	; 0x1b6 <hasta_tecla+0xf8>
 1c4:	83 ed       	ldi	r24, 0xD3	; 211
 1c6:	90 e3       	ldi	r25, 0x30	; 48
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <hasta_tecla+0x10a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <hasta_tecla+0x110>
 1ce:	00 00       	nop
				_delay_ms(50);
				return regreso[i][2];
 1d0:	00 0f       	add	r16, r16
 1d2:	11 1f       	adc	r17, r17
 1d4:	00 0f       	add	r16, r16
 1d6:	11 1f       	adc	r17, r17
 1d8:	e1 e0       	ldi	r30, 0x01	; 1
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	e0 0f       	add	r30, r16
 1e2:	f1 1f       	adc	r31, r17
 1e4:	82 81       	ldd	r24, Z+2	; 0x02
 1e6:	2d c0       	rjmp	.+90     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			}
			if(cero_en_bit(&PINT,7))
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 1f2:	88 23       	and	r24, r24
 1f4:	f9 f0       	breq	.+62     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 1f6:	83 ed       	ldi	r24, 0xD3	; 211
 1f8:	90 e3       	ldi	r25, 0x30	; 48
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <hasta_tecla+0x13c>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__EEPROM_REGION_LENGTH__>
 200:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,7)){}
 202:	67 e0       	ldi	r22, 0x07	; 7
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <cero_en_bit>
 20c:	81 11       	cpse	r24, r1
 20e:	f9 cf       	rjmp	.-14     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 210:	83 ed       	ldi	r24, 0xD3	; 211
 212:	90 e3       	ldi	r25, 0x30	; 48
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 21a:	00 00       	nop
				_delay_ms(50);
				return regreso[i][3];
 21c:	00 0f       	add	r16, r16
 21e:	11 1f       	adc	r17, r17
 220:	00 0f       	add	r16, r16
 222:	11 1f       	adc	r17, r17
 224:	e1 e0       	ldi	r30, 0x01	; 1
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ec 0f       	add	r30, r28
 22a:	fd 1f       	adc	r31, r29
 22c:	e0 0f       	add	r30, r16
 22e:	f1 1f       	adc	r31, r17
 230:	83 81       	ldd	r24, Z+3	; 0x03
 232:	07 c0       	rjmp	.+14     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
		{4,5,5,13},
		{7,8,9,14},
		{10,0,11,15}};
	while(1)
	{
		for(int i=0;i<4;i++)
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	04 30       	cpi	r16, 0x04	; 4
 23a:	11 05       	cpc	r17, r1
 23c:	0c f4       	brge	.+2      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 23e:	57 cf       	rjmp	.-338    	; 0xee <hasta_tecla+0x30>
 240:	53 cf       	rjmp	.-346    	; 0xe8 <hasta_tecla+0x2a>
				return regreso[i][3];
			}
		}
	}
	return 0;
}
 242:	60 96       	adiw	r28, 0x10	; 16
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <uno_en_bit>:
uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
 258:	fc 01       	movw	r30, r24
 25a:	20 81       	ld	r18, Z
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <uno_en_bit+0xe>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <uno_en_bit+0xa>
}
 26a:	82 23       	and	r24, r18
 26c:	08 95       	ret

0000026e <EEPROM_Write>:

uint16_t posicion_actual = 0;
uint16_t maxima_posicion = 0;

void EEPROM_Write(uint16_t dir, uint8_t data)
{
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	8c 01       	movw	r16, r24
 276:	c6 2f       	mov	r28, r22
	while(uno_en_bit(&EECR,EEWE)){}
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8c e3       	ldi	r24, 0x3C	; 60
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 2c 01 	call	0x258	; 0x258 <uno_en_bit>
 282:	81 11       	cpse	r24, r1
 284:	f9 cf       	rjmp	.-14     	; 0x278 <EEPROM_Write+0xa>
	EEAR = dir;
 286:	1f bb       	out	0x1f, r17	; 31
 288:	0e bb       	out	0x1e, r16	; 30
	EEDR = data;
 28a:	cd bb       	out	0x1d, r28	; 29
	cli();
 28c:	f8 94       	cli
	EECR |= (1<<EEMWE);
 28e:	8c b3       	in	r24, 0x1c	; 28
 290:	84 60       	ori	r24, 0x04	; 4
 292:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);
 294:	8c b3       	in	r24, 0x1c	; 28
 296:	82 60       	ori	r24, 0x02	; 2
 298:	8c bb       	out	0x1c, r24	; 28
	sei();
 29a:	78 94       	sei
}
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <EEPROM_Read>:

uint8_t EEPROM_Read(uint16_t dir)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
	while(uno_en_bit(&EECR,EEWE)){}
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	8c e3       	ldi	r24, 0x3C	; 60
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 2c 01 	call	0x258	; 0x258 <uno_en_bit>
 2b4:	81 11       	cpse	r24, r1
 2b6:	f9 cf       	rjmp	.-14     	; 0x2aa <EEPROM_Read+0x6>
	EEAR = dir;
 2b8:	df bb       	out	0x1f, r29	; 31
 2ba:	ce bb       	out	0x1e, r28	; 30
	EECR |= (1<<EERE);
 2bc:	8c b3       	in	r24, 0x1c	; 28
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 2c2:	8d b3       	in	r24, 0x1d	; 29
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <saca_uno>:

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
}
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
 2ca:	fc 01       	movw	r30, r24
 2cc:	40 81       	ld	r20, Z
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <saca_uno+0xe>
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <saca_uno+0xa>
 2dc:	24 2b       	or	r18, r20
 2de:	20 83       	st	Z, r18
 2e0:	08 95       	ret

000002e2 <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
 2e2:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
 2e4:	90 81       	ld	r25, Z
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <saca_cero+0xe>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <saca_cero+0xa>
 2f4:	20 95       	com	r18
 2f6:	29 23       	and	r18, r25
 2f8:	20 83       	st	Z, r18
 2fa:	08 95       	ret

000002fc <LCD_wr_inst_ini>:
	LCD_wait_flag();
	
}

void LCD_wr_inst_ini(uint8_t instruccion){
	PORTLCD=instruccion; //Saco el dato y le digo que escribiré un dato
 2fc:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 2fe:	64 e0       	ldi	r22, 0x04	; 4
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 308:	65 e0       	ldi	r22, 0x05	; 5
 30a:	85 e3       	ldi	r24, 0x35	; 53
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_uno(&PORTLCD,E);
 312:	66 e0       	ldi	r22, 0x06	; 6
 314:	85 e3       	ldi	r24, 0x35	; 53
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 31c:	83 ec       	ldi	r24, 0xC3	; 195
 31e:	99 e0       	ldi	r25, 0x09	; 9
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_wr_inst_ini+0x24>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_wr_inst_ini+0x2a>
 326:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	85 e3       	ldi	r24, 0x35	; 53
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
 332:	08 95       	ret

00000334 <LCD_wait_flag>:
}


void LCD_wait_flag(void){
	//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo demás salida
 334:	84 b3       	in	r24, 0x14	; 20
 336:	80 7f       	andi	r24, 0xF0	; 240
 338:	84 bb       	out	0x14, r24	; 20
	saca_cero(&PORTLCD,RS);// Instrucción
 33a:	64 e0       	ldi	r22, 0x04	; 4
 33c:	85 e3       	ldi	r24, 0x35	; 53
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 344:	65 e0       	ldi	r22, 0x05	; 5
 346:	85 e3       	ldi	r24, 0x35	; 53
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 34e:	66 e0       	ldi	r22, 0x06	; 6
 350:	85 e3       	ldi	r24, 0x35	; 53
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 358:	83 ec       	ldi	r24, 0xC3	; 195
 35a:	99 e0       	ldi	r25, 0x09	; 9
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_wait_flag+0x28>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_wait_flag+0x2e>
 362:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 364:	66 e0       	ldi	r22, 0x06	; 6
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
		if(uno_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	83 e3       	ldi	r24, 0x33	; 51
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 2c 01 	call	0x258	; 0x258 <uno_en_bit>
 378:	81 11       	cpse	r24, r1
 37a:	15 c0       	rjmp	.+42     	; 0x3a6 <LCD_wait_flag+0x72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_wait_flag+0x4a>
 382:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 384:	66 e0       	ldi	r22, 0x06	; 6
 386:	85 e3       	ldi	r24, 0x35	; 53
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	83 ec       	ldi	r24, 0xC3	; 195
 390:	99 e0       	ldi	r25, 0x09	; 9
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCD_wait_flag+0x5e>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_wait_flag+0x64>
 398:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 39a:	66 e0       	ldi	r22, 0x06	; 6
 39c:	85 e3       	ldi	r24, 0x35	; 53
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	}
 3a4:	d4 cf       	rjmp	.-88     	; 0x34e <LCD_wait_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 3a6:	66 e0       	ldi	r22, 0x06	; 6
 3a8:	85 e3       	ldi	r24, 0x35	; 53
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 3b0:	83 ec       	ldi	r24, 0xC3	; 195
 3b2:	99 e0       	ldi	r25, 0x09	; 9
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_wait_flag+0x80>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_wait_flag+0x86>
 3ba:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	85 e3       	ldi	r24, 0x35	; 53
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 3c6:	64 e0       	ldi	r22, 0x04	; 4
 3c8:	85 e3       	ldi	r24, 0x35	; 53
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 3d0:	65 e0       	ldi	r22, 0x05	; 5
 3d2:	85 e3       	ldi	r24, 0x35	; 53
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 3da:	84 b3       	in	r24, 0x14	; 20
 3dc:	8f 67       	ori	r24, 0x7F	; 127
 3de:	84 bb       	out	0x14, r24	; 20
 3e0:	08 95       	ret

000003e2 <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(uint8_t data){
 3e2:	cf 93       	push	r28
 3e4:	c8 2f       	mov	r28, r24
	//saco la parte más significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribiré un dato
 3e6:	82 95       	swap	r24
 3e8:	8f 70       	andi	r24, 0x0F	; 15
 3ea:	85 bb       	out	0x15, r24	; 21
	saca_uno(&PORTLCD,RS);
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	85 e3       	ldi	r24, 0x35	; 53
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
	saca_cero(&PORTLCD,RW);
 3f6:	65 e0       	ldi	r22, 0x05	; 5
 3f8:	85 e3       	ldi	r24, 0x35	; 53
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_uno(&PORTLCD,E);
 400:	66 e0       	ldi	r22, 0x06	; 6
 402:	85 e3       	ldi	r24, 0x35	; 53
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 40a:	83 ec       	ldi	r24, 0xC3	; 195
 40c:	99 e0       	ldi	r25, 0x09	; 9
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 416:	66 e0       	ldi	r22, 0x06	; 6
 418:	85 e3       	ldi	r24, 0x35	; 53
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribiré un dato
 420:	cf 70       	andi	r28, 0x0F	; 15
 422:	c5 bb       	out	0x15, r28	; 21
	saca_uno(&PORTLCD,RS);
 424:	64 e0       	ldi	r22, 0x04	; 4
 426:	85 e3       	ldi	r24, 0x35	; 53
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
	saca_cero(&PORTLCD,RW);
 42e:	65 e0       	ldi	r22, 0x05	; 5
 430:	85 e3       	ldi	r24, 0x35	; 53
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_uno(&PORTLCD,E);
 438:	66 e0       	ldi	r22, 0x06	; 6
 43a:	85 e3       	ldi	r24, 0x35	; 53
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 442:	83 ec       	ldi	r24, 0xC3	; 195
 444:	99 e0       	ldi	r25, 0x09	; 9
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 44e:	66 e0       	ldi	r22, 0x06	; 6
 450:	85 e3       	ldi	r24, 0x35	; 53
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_cero(&PORTLCD,RS);
 458:	64 e0       	ldi	r22, 0x04	; 4
 45a:	85 e3       	ldi	r24, 0x35	; 53
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	LCD_wait_flag();
 462:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_wait_flag>
	
}
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <LCD_wr_string>:
			LCD_wr_string("Memoria Llena! ");
		}*/
	}
}

void LCD_wr_string(volatile uint8_t *s){
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	fc 01       	movw	r30, r24
	uint8_t c;
	while((c=*s++)){
 470:	03 c0       	rjmp	.+6      	; 0x478 <LCD_wr_string+0xe>
		LCD_wr_char(c);
 472:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
	}
}

void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c=*s++)){
 476:	fe 01       	movw	r30, r28
 478:	ef 01       	movw	r28, r30
 47a:	21 96       	adiw	r28, 0x01	; 1
 47c:	80 81       	ld	r24, Z
 47e:	81 11       	cpse	r24, r1
 480:	f8 cf       	rjmp	.-16     	; 0x472 <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 488:	cf 93       	push	r28
 48a:	c8 2f       	mov	r28, r24
	//saco la parte más significativa de la instrucción
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribiré un dato
 48c:	82 95       	swap	r24
 48e:	8f 70       	andi	r24, 0x0F	; 15
 490:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	85 e3       	ldi	r24, 0x35	; 53
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 49c:	65 e0       	ldi	r22, 0x05	; 5
 49e:	85 e3       	ldi	r24, 0x35	; 53
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_uno(&PORTLCD,E);
 4a6:	66 e0       	ldi	r22, 0x06	; 6
 4a8:	85 e3       	ldi	r24, 0x35	; 53
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 4b0:	83 ec       	ldi	r24, 0xC3	; 195
 4b2:	99 e0       	ldi	r25, 0x09	; 9
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_wr_instruction+0x2c>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_wr_instruction+0x32>
 4ba:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 4bc:	66 e0       	ldi	r22, 0x06	; 6
 4be:	85 e3       	ldi	r24, 0x35	; 53
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	//saco la parte menos significativa de la instrucción
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribiré un dato
 4c6:	cf 70       	andi	r28, 0x0F	; 15
 4c8:	c5 bb       	out	0x15, r28	; 21
	saca_cero(&PORTLCD,RS);
 4ca:	64 e0       	ldi	r22, 0x04	; 4
 4cc:	85 e3       	ldi	r24, 0x35	; 53
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 4d4:	65 e0       	ldi	r22, 0x05	; 5
 4d6:	85 e3       	ldi	r24, 0x35	; 53
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	saca_uno(&PORTLCD,E);
 4de:	66 e0       	ldi	r22, 0x06	; 6
 4e0:	85 e3       	ldi	r24, 0x35	; 53
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 65 01 	call	0x2ca	; 0x2ca <saca_uno>
 4e8:	83 ec       	ldi	r24, 0xC3	; 195
 4ea:	99 e0       	ldi	r25, 0x09	; 9
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_wr_instruction+0x64>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_wr_instruction+0x6a>
 4f2:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	85 e3       	ldi	r24, 0x35	; 53
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <saca_cero>
	LCD_wait_flag();
 4fe:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_wait_flag>
}
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <MostrarPosicion>:
ISR(TIMER0_COMP_vect){
	
}


void MostrarPosicion(){
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
	uint8_t u  = posicion_actual%10;
 512:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <posicion_actual>
 516:	50 91 8d 00 	lds	r21, 0x008D	; 0x80008d <posicion_actual+0x1>
 51a:	9a 01       	movw	r18, r20
 51c:	ad ec       	ldi	r26, 0xCD	; 205
 51e:	bc ec       	ldi	r27, 0xCC	; 204
 520:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 524:	ec 01       	movw	r28, r24
 526:	d6 95       	lsr	r29
 528:	c7 95       	ror	r28
 52a:	d6 95       	lsr	r29
 52c:	c7 95       	ror	r28
 52e:	d6 95       	lsr	r29
 530:	c7 95       	ror	r28
 532:	ce 01       	movw	r24, r28
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	cc 0f       	add	r28, r28
 53a:	dd 1f       	adc	r29, r29
 53c:	cc 0f       	add	r28, r28
 53e:	dd 1f       	adc	r29, r29
 540:	cc 0f       	add	r28, r28
 542:	dd 1f       	adc	r29, r29
 544:	c8 0f       	add	r28, r24
 546:	d9 1f       	adc	r29, r25
 548:	ca 01       	movw	r24, r20
 54a:	8c 1b       	sub	r24, r28
 54c:	9d 0b       	sbc	r25, r29
 54e:	ec 01       	movw	r28, r24
	uint8_t d  = (posicion_actual/10)%10;
 550:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 554:	fc 01       	movw	r30, r24
 556:	f6 95       	lsr	r31
 558:	e7 95       	ror	r30
 55a:	f6 95       	lsr	r31
 55c:	e7 95       	ror	r30
 55e:	f6 95       	lsr	r31
 560:	e7 95       	ror	r30
 562:	9f 01       	movw	r18, r30
 564:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 568:	8c 01       	movw	r16, r24
 56a:	16 95       	lsr	r17
 56c:	07 95       	ror	r16
 56e:	16 95       	lsr	r17
 570:	07 95       	ror	r16
 572:	16 95       	lsr	r17
 574:	07 95       	ror	r16
 576:	c8 01       	movw	r24, r16
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	00 0f       	add	r16, r16
 57e:	11 1f       	adc	r17, r17
 580:	00 0f       	add	r16, r16
 582:	11 1f       	adc	r17, r17
 584:	00 0f       	add	r16, r16
 586:	11 1f       	adc	r17, r17
 588:	08 0f       	add	r16, r24
 58a:	19 1f       	adc	r17, r25
 58c:	cf 01       	movw	r24, r30
 58e:	80 1b       	sub	r24, r16
 590:	91 0b       	sbc	r25, r17
 592:	8c 01       	movw	r16, r24
	uint8_t c  = (posicion_actual/100)%10;
 594:	9a 01       	movw	r18, r20
 596:	36 95       	lsr	r19
 598:	27 95       	ror	r18
 59a:	36 95       	lsr	r19
 59c:	27 95       	ror	r18
 59e:	ab e7       	ldi	r26, 0x7B	; 123
 5a0:	b4 e1       	ldi	r27, 0x14	; 20
 5a2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 5a6:	ac 01       	movw	r20, r24
 5a8:	56 95       	lsr	r21
 5aa:	47 95       	ror	r20
 5ac:	9a 01       	movw	r18, r20
 5ae:	ad ec       	ldi	r26, 0xCD	; 205
 5b0:	bc ec       	ldi	r27, 0xCC	; 204
 5b2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 5b6:	7c 01       	movw	r14, r24
 5b8:	f6 94       	lsr	r15
 5ba:	e7 94       	ror	r14
 5bc:	f6 94       	lsr	r15
 5be:	e7 94       	ror	r14
 5c0:	f6 94       	lsr	r15
 5c2:	e7 94       	ror	r14
 5c4:	c7 01       	movw	r24, r14
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	ee 0c       	add	r14, r14
 5cc:	ff 1c       	adc	r15, r15
 5ce:	ee 0c       	add	r14, r14
 5d0:	ff 1c       	adc	r15, r15
 5d2:	ee 0c       	add	r14, r14
 5d4:	ff 1c       	adc	r15, r15
 5d6:	e8 0e       	add	r14, r24
 5d8:	f9 1e       	adc	r15, r25
 5da:	ca 01       	movw	r24, r20
 5dc:	8e 19       	sub	r24, r14
 5de:	9f 09       	sbc	r25, r15
 5e0:	7c 01       	movw	r14, r24
	LCD_wr_instruction(0b11000111);
 5e2:	87 ec       	ldi	r24, 0xC7	; 199
 5e4:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_char(c+48);
 5e8:	80 e3       	ldi	r24, 0x30	; 48
 5ea:	8e 0d       	add	r24, r14
 5ec:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
	LCD_wr_char(d+48);
 5f0:	80 e3       	ldi	r24, 0x30	; 48
 5f2:	80 0f       	add	r24, r16
 5f4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
	LCD_wr_char(u+48);
 5f8:	8c 2f       	mov	r24, r28
 5fa:	80 5d       	subi	r24, 0xD0	; 208
 5fc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	08 95       	ret

0000060e <__vector_14>:
	EECR |= (1<<EERE);
	return EEDR;
}


ISR(ADC_vect){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	cf 93       	push	r28
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
	uint8_t res = ADCH;
 632:	c5 b1       	in	r28, 0x05	; 5
	MostrarPosicion();
 634:	0e 94 83 02 	call	0x506	; 0x506 <MostrarPosicion>
	if(posicion_actual<=511){
 638:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <posicion_actual>
 63c:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <posicion_actual+0x1>
 640:	81 15       	cp	r24, r1
 642:	22 e0       	ldi	r18, 0x02	; 2
 644:	92 07       	cpc	r25, r18
 646:	60 f4       	brcc	.+24     	; 0x660 <__vector_14+0x52>
		EEPROM_Write(posicion_actual,res);
 648:	6c 2f       	mov	r22, r28
 64a:	0e 94 37 01 	call	0x26e	; 0x26e <EEPROM_Write>
		posicion_actual++;
 64e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <posicion_actual>
 652:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <posicion_actual+0x1>
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <posicion_actual+0x1>
 65c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <posicion_actual>
	}
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	cf 91       	pop	r28
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <MostrarLecutra>:
	LCD_wr_char(c+48);
	LCD_wr_char(d+48);
	LCD_wr_char(u+48);
}

void MostrarLecutra(){
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
	float res = ((uint16_t)EEPROM_Read(posicion_actual) * 5)/255.0;
 690:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <posicion_actual>
 694:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <posicion_actual+0x1>
 698:	0e 94 52 01 	call	0x2a4	; 0x2a4 <EEPROM_Read>
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	bc 01       	movw	r22, r24
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	68 0f       	add	r22, r24
 6aa:	79 1f       	adc	r23, r25
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 0b 05 	call	0xa16	; 0xa16 <__floatunsisf>
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	4f e7       	ldi	r20, 0x7F	; 127
 6ba:	53 e4       	ldi	r21, 0x43	; 67
 6bc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
 6c0:	6b 01       	movw	r12, r22
 6c2:	7c 01       	movw	r14, r24
	uint8_t v = (uint8_t)res;
 6c4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
 6c8:	c6 2f       	mov	r28, r22
	LCD_wr_instruction(0b11000000);
 6ca:	80 ec       	ldi	r24, 0xC0	; 192
 6cc:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_char(v+48);
 6d0:	80 e3       	ldi	r24, 0x30	; 48
 6d2:	8c 0f       	add	r24, r28
 6d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
	
	LCD_wr_instruction(0b11000001);
 6d8:	81 ec       	ldi	r24, 0xC1	; 193
 6da:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_char('.');
 6de:	8e e2       	ldi	r24, 0x2E	; 46
 6e0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
	
	//decimal 1
	uint8_t decimal1 = (res*10.0);
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	40 e2       	ldi	r20, 0x20	; 32
 6ea:	51 e4       	ldi	r21, 0x41	; 65
 6ec:	c7 01       	movw	r24, r14
 6ee:	b6 01       	movw	r22, r12
 6f0:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
 6f4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
	decimal1 -= (v*10);
 6f8:	9c 2f       	mov	r25, r28
 6fa:	99 0f       	add	r25, r25
 6fc:	89 2f       	mov	r24, r25
 6fe:	88 0f       	add	r24, r24
 700:	88 0f       	add	r24, r24
 702:	89 0f       	add	r24, r25
 704:	d6 2f       	mov	r29, r22
 706:	d8 1b       	sub	r29, r24
	LCD_wr_instruction(0b11000010);
 708:	82 ec       	ldi	r24, 0xC2	; 194
 70a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_char(decimal1+48);
 70e:	80 e3       	ldi	r24, 0x30	; 48
 710:	8d 0f       	add	r24, r29
 712:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
	//decimal 2
	uint8_t decimal2 = (uint8_t)(res*100) - (v*100) - (decimal1*10);
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	48 ec       	ldi	r20, 0xC8	; 200
 71c:	52 e4       	ldi	r21, 0x42	; 66
 71e:	c7 01       	movw	r24, r14
 720:	b6 01       	movw	r22, r12
 722:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
 726:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
 72a:	dd 0f       	add	r29, r29
 72c:	8d 2f       	mov	r24, r29
 72e:	88 0f       	add	r24, r24
 730:	88 0f       	add	r24, r24
 732:	d8 0f       	add	r29, r24
 734:	8c e9       	ldi	r24, 0x9C	; 156
 736:	c8 9f       	mul	r28, r24
 738:	c0 2d       	mov	r28, r0
 73a:	11 24       	eor	r1, r1
 73c:	cd 1b       	sub	r28, r29
 73e:	c6 0f       	add	r28, r22
	LCD_wr_instruction(0b11000011);
 740:	83 ec       	ldi	r24, 0xC3	; 195
 742:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_char(decimal2+48);
 746:	80 e3       	ldi	r24, 0x30	; 48
 748:	8c 0f       	add	r24, r28
 74a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_wr_char>
}
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	ff 90       	pop	r15
 754:	ef 90       	pop	r14
 756:	df 90       	pop	r13
 758:	cf 90       	pop	r12
 75a:	08 95       	ret

0000075c <LCD_init>:
		LCD_wr_char(c);
	}
}

void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 75c:	8f e7       	ldi	r24, 0x7F	; 127
 75e:	84 bb       	out	0x14, r24	; 20
 760:	85 ea       	ldi	r24, 0xA5	; 165
 762:	9e e0       	ldi	r25, 0x0E	; 14
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <LCD_init+0x8>
 768:	00 c0       	rjmp	.+0      	; 0x76a <LCD_init+0xe>
 76a:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 76c:	83 e0       	ldi	r24, 0x03	; 3
 76e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_wr_inst_ini>
 772:	81 ee       	ldi	r24, 0xE1	; 225
 774:	94 e0       	ldi	r25, 0x04	; 4
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <LCD_init+0x1a>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <LCD_init+0x20>
 77c:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 784:	91 e2       	ldi	r25, 0x21	; 33
 786:	9a 95       	dec	r25
 788:	f1 f7       	brne	.-4      	; 0x786 <LCD_init+0x2a>
 78a:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_wr_inst_ini>
 792:	81 e2       	ldi	r24, 0x21	; 33
 794:	8a 95       	dec	r24
 796:	f1 f7       	brne	.-4      	; 0x794 <LCD_init+0x38>
 798:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_wr_inst_ini>
 7a0:	91 e2       	ldi	r25, 0x21	; 33
 7a2:	9a 95       	dec	r25
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_init+0x46>
 7a6:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, número de líneas y tipo de letra
 7a8:	88 e2       	ldi	r24, 0x28	; 40
 7aa:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 7ae:	88 e0       	ldi	r24, 0x08	; 8
 7b0:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 7ba:	86 e0       	ldi	r24, 0x06	; 6
 7bc:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 7c0:	8c e0       	ldi	r24, 0x0C	; 12
 7c2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
 7c6:	08 95       	ret

000007c8 <main>:
	LCD_wr_char(decimal2+48);
}

int main(void)
{
	LCD_init(); 
 7c8:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_init>
	//Importa el orden de configuración, primero el ADC y luego el Timer

	/*Configuracion ADC*/
	SFIOR  = 0b01100000;	/*Con interrupción del Timer0*/
 7cc:	80 e6       	ldi	r24, 0x60	; 96
 7ce:	80 bf       	out	0x30, r24	; 48
	ADMUX  = 0b01100000;
 7d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10101011;	/*Trigger Activado, factor de conversión: 8 a 1 mhz*/
 7d2:	8b ea       	ldi	r24, 0xAB	; 171
 7d4:	86 b9       	out	0x06, r24	; 6
	
	/*Timer0*/
	//Se reinicia si se habilita la interrupcion
	TIFR  = 0b00000011;
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	88 bf       	out	0x38, r24	; 56
	TIMSK = 0b00000010;		//Importante quitar la interrupcion del Timer0
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
 7de:	12 be       	out	0x32, r1	; 50
	OCR0  = 243;
 7e0:	83 ef       	ldi	r24, 0xF3	; 243
 7e2:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = 0b00001101;		//Prescaler 1024 en modo CTC
 7e4:	8d e0       	ldi	r24, 0x0D	; 13
 7e6:	83 bf       	out	0x33, r24	; 51
	
	/*Puertos*/
	DDRT  = 0b00001111;
 7e8:	8f e0       	ldi	r24, 0x0F	; 15
 7ea:	81 bb       	out	0x11, r24	; 17
	PORTT = 0b11111111;
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
 7ee:	82 bb       	out	0x12, r24	; 18
	
	DDRA  = 0b00000000;
 7f0:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0b00000000;
 7f2:	1b ba       	out	0x1b, r1	; 27

	LCD_wr_instruction(0b10000000);
 7f4:	80 e8       	ldi	r24, 0x80	; 128
 7f6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	LCD_wr_string("SENSANDO... ");	
 7fa:	80 e7       	ldi	r24, 0x70	; 112
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_wr_string>
	
	sei();					//Importante primero inicializar el LCD antes de agregas las interrupciones
 802:	78 94       	sei

	while (1)
	{
		uint8_t tecla = hasta_tecla();
 804:	0e 94 5f 00 	call	0xbe	; 0xbe <hasta_tecla>
		//apagar timer
		
		if(tecla == 14 && (TCCR0 & (1<<0))){
 808:	8e 30       	cpi	r24, 0x0E	; 14
 80a:	39 f5       	brne	.+78     	; 0x85a <main+0x92>
 80c:	03 b6       	in	r0, 0x33	; 51
 80e:	00 fe       	sbrs	r0, 0
 810:	24 c0       	rjmp	.+72     	; 0x85a <main+0x92>
			TCCR0 = 0b00001000;
 812:	88 e0       	ldi	r24, 0x08	; 8
 814:	83 bf       	out	0x33, r24	; 51
			posicion_actual-=2;
 816:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <posicion_actual>
 81a:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <posicion_actual+0x1>
 81e:	02 97       	sbiw	r24, 0x02	; 2
 820:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <posicion_actual+0x1>
 824:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <posicion_actual>
			maxima_posicion = posicion_actual;
 828:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
 82c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
			LCD_wr_instruction(LCD_Cmd_Clear);
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 836:	83 ec       	ldi	r24, 0xC3	; 195
 838:	99 e0       	ldi	r25, 0x09	; 9
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	f1 f7       	brne	.-4      	; 0x83a <main+0x72>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <main+0x78>
 840:	00 00       	nop
			_delay_ms(10);
			LCD_wr_instruction(0b10000000);
 842:	80 e8       	ldi	r24, 0x80	; 128
 844:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
			LCD_wr_string("ULTIMOS VAL.");
 848:	8d e7       	ldi	r24, 0x7D	; 125
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_wr_string>
			MostrarPosicion();
 850:	0e 94 83 02 	call	0x506	; 0x506 <MostrarPosicion>
			MostrarLecutra();
 854:	0e 94 42 03 	call	0x684	; 0x684 <MostrarLecutra>
 858:	d5 cf       	rjmp	.-86     	; 0x804 <main+0x3c>
		}
		else{
			if(tecla == 12 && posicion_actual+1 <= maxima_posicion){
 85a:	8c 30       	cpi	r24, 0x0C	; 12
 85c:	b1 f4       	brne	.+44     	; 0x88a <main+0xc2>
 85e:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <posicion_actual>
 862:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <posicion_actual+0x1>
 866:	2f 5f       	subi	r18, 0xFF	; 255
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__data_end>
 86e:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__data_end+0x1>
 872:	42 17       	cp	r20, r18
 874:	53 07       	cpc	r21, r19
 876:	48 f0       	brcs	.+18     	; 0x88a <main+0xc2>
				posicion_actual+=1;
 878:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <posicion_actual+0x1>
 87c:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <posicion_actual>
				MostrarLecutra();
 880:	0e 94 42 03 	call	0x684	; 0x684 <MostrarLecutra>
				MostrarPosicion();
 884:	0e 94 83 02 	call	0x506	; 0x506 <MostrarPosicion>
 888:	bd cf       	rjmp	.-134    	; 0x804 <main+0x3c>
			}else if(tecla == 13 && posicion_actual > 0){
 88a:	8d 30       	cpi	r24, 0x0D	; 13
 88c:	91 f4       	brne	.+36     	; 0x8b2 <main+0xea>
 88e:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <posicion_actual>
 892:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <posicion_actual+0x1>
 896:	21 15       	cp	r18, r1
 898:	31 05       	cpc	r19, r1
 89a:	59 f0       	breq	.+22     	; 0x8b2 <main+0xea>
				posicion_actual-=1;
 89c:	21 50       	subi	r18, 0x01	; 1
 89e:	31 09       	sbc	r19, r1
 8a0:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <posicion_actual+0x1>
 8a4:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <posicion_actual>
				MostrarLecutra();
 8a8:	0e 94 42 03 	call	0x684	; 0x684 <MostrarLecutra>
				MostrarPosicion();
 8ac:	0e 94 83 02 	call	0x506	; 0x506 <MostrarPosicion>
 8b0:	a9 cf       	rjmp	.-174    	; 0x804 <main+0x3c>
			}else if(tecla == 14){ //reiniciar
 8b2:	8e 30       	cpi	r24, 0x0E	; 14
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <main+0xf0>
 8b6:	a6 cf       	rjmp	.-180    	; 0x804 <main+0x3c>
				LCD_wr_instruction(0b10000000);
 8b8:	80 e8       	ldi	r24, 0x80	; 128
 8ba:	0e 94 44 02 	call	0x488	; 0x488 <LCD_wr_instruction>
				LCD_wr_string("SENSANDO... ");
 8be:	80 e7       	ldi	r24, 0x70	; 112
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_wr_string>
				posicion_actual = 0;
 8c6:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <posicion_actual+0x1>
 8ca:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <posicion_actual>
				TCCR0 = 0b00001101;
 8ce:	8d e0       	ldi	r24, 0x0D	; 13
 8d0:	83 bf       	out	0x33, r24	; 51
 8d2:	98 cf       	rjmp	.-208    	; 0x804 <main+0x3c>

000008d4 <__divsf3>:
 8d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3x>
 8d8:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
 8dc:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
 8e0:	58 f0       	brcs	.+22     	; 0x8f8 <__divsf3+0x24>
 8e2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
 8e6:	40 f0       	brcs	.+16     	; 0x8f8 <__divsf3+0x24>
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <__divsf3+0x20>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	29 f0       	breq	.+10     	; 0x8f8 <__divsf3+0x24>
 8ee:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 8f2:	51 11       	cpse	r21, r1
 8f4:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 8f8:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>

000008fc <__divsf3x>:
 8fc:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
 900:	68 f3       	brcs	.-38     	; 0x8dc <__divsf3+0x8>

00000902 <__divsf3_pse>:
 902:	99 23       	and	r25, r25
 904:	b1 f3       	breq	.-20     	; 0x8f2 <__divsf3+0x1e>
 906:	55 23       	and	r21, r21
 908:	91 f3       	breq	.-28     	; 0x8ee <__divsf3+0x1a>
 90a:	95 1b       	sub	r25, r21
 90c:	55 0b       	sbc	r21, r21
 90e:	bb 27       	eor	r27, r27
 910:	aa 27       	eor	r26, r26
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	84 07       	cpc	r24, r20
 918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	22 0f       	add	r18, r18
 920:	33 1f       	adc	r19, r19
 922:	44 1f       	adc	r20, r20
 924:	aa 1f       	adc	r26, r26
 926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
 928:	35 d0       	rcall	.+106    	; 0x994 <__divsf3_pse+0x92>
 92a:	0e 2e       	mov	r0, r30
 92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
 92e:	e0 e8       	ldi	r30, 0x80	; 128
 930:	32 d0       	rcall	.+100    	; 0x996 <__divsf3_pse+0x94>
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	e6 95       	lsr	r30
 938:	00 1c       	adc	r0, r0
 93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
 93c:	2b d0       	rcall	.+86     	; 0x994 <__divsf3_pse+0x92>
 93e:	fe 2f       	mov	r31, r30
 940:	29 d0       	rcall	.+82     	; 0x994 <__divsf3_pse+0x92>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	bb 1f       	adc	r27, r27
 94a:	26 17       	cp	r18, r22
 94c:	37 07       	cpc	r19, r23
 94e:	48 07       	cpc	r20, r24
 950:	ab 07       	cpc	r26, r27
 952:	b0 e8       	ldi	r27, 0x80	; 128
 954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
 956:	bb 0b       	sbc	r27, r27
 958:	80 2d       	mov	r24, r0
 95a:	bf 01       	movw	r22, r30
 95c:	ff 27       	eor	r31, r31
 95e:	93 58       	subi	r25, 0x83	; 131
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x70>
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	51 05       	cpc	r21, r1
 968:	78 f0       	brcs	.+30     	; 0x988 <__divsf3_pse+0x86>
 96a:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 96e:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 972:	5f 3f       	cpi	r21, 0xFF	; 255
 974:	e4 f3       	brlt	.-8      	; 0x96e <__divsf3_pse+0x6c>
 976:	98 3e       	cpi	r25, 0xE8	; 232
 978:	d4 f3       	brlt	.-12     	; 0x96e <__divsf3_pse+0x6c>
 97a:	86 95       	lsr	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f7 95       	ror	r31
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	c9 f7       	brne	.-14     	; 0x97a <__divsf3_pse+0x78>
 988:	88 0f       	add	r24, r24
 98a:	91 1d       	adc	r25, r1
 98c:	96 95       	lsr	r25
 98e:	87 95       	ror	r24
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret
 994:	e1 e0       	ldi	r30, 0x01	; 1
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	bb 1f       	adc	r27, r27
 99e:	62 17       	cp	r22, r18
 9a0:	73 07       	cpc	r23, r19
 9a2:	84 07       	cpc	r24, r20
 9a4:	ba 07       	cpc	r27, r26
 9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__divsf3_pse+0xae>
 9a8:	62 1b       	sub	r22, r18
 9aa:	73 0b       	sbc	r23, r19
 9ac:	84 0b       	sbc	r24, r20
 9ae:	ba 0b       	sbc	r27, r26
 9b0:	ee 1f       	adc	r30, r30
 9b2:	88 f7       	brcc	.-30     	; 0x996 <__divsf3_pse+0x94>
 9b4:	e0 95       	com	r30
 9b6:	08 95       	ret

000009b8 <__fixunssfsi>:
 9b8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_splitA>
 9bc:	88 f0       	brcs	.+34     	; 0x9e0 <__fixunssfsi+0x28>
 9be:	9f 57       	subi	r25, 0x7F	; 127
 9c0:	98 f0       	brcs	.+38     	; 0x9e8 <__fixunssfsi+0x30>
 9c2:	b9 2f       	mov	r27, r25
 9c4:	99 27       	eor	r25, r25
 9c6:	b7 51       	subi	r27, 0x17	; 23
 9c8:	b0 f0       	brcs	.+44     	; 0x9f6 <__fixunssfsi+0x3e>
 9ca:	e1 f0       	breq	.+56     	; 0xa04 <__fixunssfsi+0x4c>
 9cc:	66 0f       	add	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	1a f0       	brmi	.+6      	; 0x9dc <__fixunssfsi+0x24>
 9d6:	ba 95       	dec	r27
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__fixunssfsi+0x14>
 9da:	14 c0       	rjmp	.+40     	; 0xa04 <__fixunssfsi+0x4c>
 9dc:	b1 30       	cpi	r27, 0x01	; 1
 9de:	91 f0       	breq	.+36     	; 0xa04 <__fixunssfsi+0x4c>
 9e0:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_zero>
 9e4:	b1 e0       	ldi	r27, 0x01	; 1
 9e6:	08 95       	ret
 9e8:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_zero>
 9ec:	67 2f       	mov	r22, r23
 9ee:	78 2f       	mov	r23, r24
 9f0:	88 27       	eor	r24, r24
 9f2:	b8 5f       	subi	r27, 0xF8	; 248
 9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x4c>
 9f6:	b9 3f       	cpi	r27, 0xF9	; 249
 9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x34>
 9fa:	86 95       	lsr	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b3 95       	inc	r27
 a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x42>
 a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x5c>
 a06:	90 95       	com	r25
 a08:	80 95       	com	r24
 a0a:	70 95       	com	r23
 a0c:	61 95       	neg	r22
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	8f 4f       	sbci	r24, 0xFF	; 255
 a12:	9f 4f       	sbci	r25, 0xFF	; 255
 a14:	08 95       	ret

00000a16 <__floatunsisf>:
 a16:	e8 94       	clt
 a18:	09 c0       	rjmp	.+18     	; 0xa2c <__floatsisf+0x12>

00000a1a <__floatsisf>:
 a1a:	97 fb       	bst	r25, 7
 a1c:	3e f4       	brtc	.+14     	; 0xa2c <__floatsisf+0x12>
 a1e:	90 95       	com	r25
 a20:	80 95       	com	r24
 a22:	70 95       	com	r23
 a24:	61 95       	neg	r22
 a26:	7f 4f       	sbci	r23, 0xFF	; 255
 a28:	8f 4f       	sbci	r24, 0xFF	; 255
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	99 23       	and	r25, r25
 a2e:	a9 f0       	breq	.+42     	; 0xa5a <__floatsisf+0x40>
 a30:	f9 2f       	mov	r31, r25
 a32:	96 e9       	ldi	r25, 0x96	; 150
 a34:	bb 27       	eor	r27, r27
 a36:	93 95       	inc	r25
 a38:	f6 95       	lsr	r31
 a3a:	87 95       	ror	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	b7 95       	ror	r27
 a42:	f1 11       	cpse	r31, r1
 a44:	f8 cf       	rjmp	.-16     	; 0xa36 <__floatsisf+0x1c>
 a46:	fa f4       	brpl	.+62     	; 0xa86 <__floatsisf+0x6c>
 a48:	bb 0f       	add	r27, r27
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__floatsisf+0x36>
 a4c:	60 ff       	sbrs	r22, 0
 a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__floatsisf+0x6c>
 a50:	6f 5f       	subi	r22, 0xFF	; 255
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <__floatsisf+0x6c>
 a5a:	88 23       	and	r24, r24
 a5c:	11 f0       	breq	.+4      	; 0xa62 <__floatsisf+0x48>
 a5e:	96 e9       	ldi	r25, 0x96	; 150
 a60:	11 c0       	rjmp	.+34     	; 0xa84 <__floatsisf+0x6a>
 a62:	77 23       	and	r23, r23
 a64:	21 f0       	breq	.+8      	; 0xa6e <__floatsisf+0x54>
 a66:	9e e8       	ldi	r25, 0x8E	; 142
 a68:	87 2f       	mov	r24, r23
 a6a:	76 2f       	mov	r23, r22
 a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__floatsisf+0x5e>
 a6e:	66 23       	and	r22, r22
 a70:	71 f0       	breq	.+28     	; 0xa8e <__floatsisf+0x74>
 a72:	96 e8       	ldi	r25, 0x86	; 134
 a74:	86 2f       	mov	r24, r22
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	2a f0       	brmi	.+10     	; 0xa86 <__floatsisf+0x6c>
 a7c:	9a 95       	dec	r25
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	da f7       	brpl	.-10     	; 0xa7c <__floatsisf+0x62>
 a86:	88 0f       	add	r24, r24
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <__fp_inf>:
 a90:	97 f9       	bld	r25, 7
 a92:	9f 67       	ori	r25, 0x7F	; 127
 a94:	80 e8       	ldi	r24, 0x80	; 128
 a96:	70 e0       	ldi	r23, 0x00	; 0
 a98:	60 e0       	ldi	r22, 0x00	; 0
 a9a:	08 95       	ret

00000a9c <__fp_nan>:
 a9c:	9f ef       	ldi	r25, 0xFF	; 255
 a9e:	80 ec       	ldi	r24, 0xC0	; 192
 aa0:	08 95       	ret

00000aa2 <__fp_pscA>:
 aa2:	00 24       	eor	r0, r0
 aa4:	0a 94       	dec	r0
 aa6:	16 16       	cp	r1, r22
 aa8:	17 06       	cpc	r1, r23
 aaa:	18 06       	cpc	r1, r24
 aac:	09 06       	cpc	r0, r25
 aae:	08 95       	ret

00000ab0 <__fp_pscB>:
 ab0:	00 24       	eor	r0, r0
 ab2:	0a 94       	dec	r0
 ab4:	12 16       	cp	r1, r18
 ab6:	13 06       	cpc	r1, r19
 ab8:	14 06       	cpc	r1, r20
 aba:	05 06       	cpc	r0, r21
 abc:	08 95       	ret

00000abe <__fp_round>:
 abe:	09 2e       	mov	r0, r25
 ac0:	03 94       	inc	r0
 ac2:	00 0c       	add	r0, r0
 ac4:	11 f4       	brne	.+4      	; 0xaca <__fp_round+0xc>
 ac6:	88 23       	and	r24, r24
 ac8:	52 f0       	brmi	.+20     	; 0xade <__fp_round+0x20>
 aca:	bb 0f       	add	r27, r27
 acc:	40 f4       	brcc	.+16     	; 0xade <__fp_round+0x20>
 ace:	bf 2b       	or	r27, r31
 ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0x18>
 ad2:	60 ff       	sbrs	r22, 0
 ad4:	04 c0       	rjmp	.+8      	; 0xade <__fp_round+0x20>
 ad6:	6f 5f       	subi	r22, 0xFF	; 255
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__fp_split3>:
 ae0:	57 fd       	sbrc	r21, 7
 ae2:	90 58       	subi	r25, 0x80	; 128
 ae4:	44 0f       	add	r20, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	59 f0       	breq	.+22     	; 0xb00 <__fp_splitA+0x10>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	71 f0       	breq	.+28     	; 0xb0a <__fp_splitA+0x1a>
 aee:	47 95       	ror	r20

00000af0 <__fp_splitA>:
 af0:	88 0f       	add	r24, r24
 af2:	97 fb       	bst	r25, 7
 af4:	99 1f       	adc	r25, r25
 af6:	61 f0       	breq	.+24     	; 0xb10 <__fp_splitA+0x20>
 af8:	9f 3f       	cpi	r25, 0xFF	; 255
 afa:	79 f0       	breq	.+30     	; 0xb1a <__fp_splitA+0x2a>
 afc:	87 95       	ror	r24
 afe:	08 95       	ret
 b00:	12 16       	cp	r1, r18
 b02:	13 06       	cpc	r1, r19
 b04:	14 06       	cpc	r1, r20
 b06:	55 1f       	adc	r21, r21
 b08:	f2 cf       	rjmp	.-28     	; 0xaee <__fp_split3+0xe>
 b0a:	46 95       	lsr	r20
 b0c:	f1 df       	rcall	.-30     	; 0xaf0 <__fp_splitA>
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <__fp_splitA+0x30>
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	18 06       	cpc	r1, r24
 b16:	99 1f       	adc	r25, r25
 b18:	f1 cf       	rjmp	.-30     	; 0xafc <__fp_splitA+0xc>
 b1a:	86 95       	lsr	r24
 b1c:	71 05       	cpc	r23, r1
 b1e:	61 05       	cpc	r22, r1
 b20:	08 94       	sec
 b22:	08 95       	ret

00000b24 <__fp_zero>:
 b24:	e8 94       	clt

00000b26 <__fp_szero>:
 b26:	bb 27       	eor	r27, r27
 b28:	66 27       	eor	r22, r22
 b2a:	77 27       	eor	r23, r23
 b2c:	cb 01       	movw	r24, r22
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <__mulsf3>:
 b32:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 b36:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
 b3a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
 b3e:	38 f0       	brcs	.+14     	; 0xb4e <__mulsf3+0x1c>
 b40:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__mulsf3+0x1c>
 b46:	95 23       	and	r25, r21
 b48:	11 f0       	breq	.+4      	; 0xb4e <__mulsf3+0x1c>
 b4a:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 b4e:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>
 b52:	11 24       	eor	r1, r1
 b54:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>

00000b58 <__mulsf3x>:
 b58:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
 b5c:	70 f3       	brcs	.-36     	; 0xb3a <__mulsf3+0x8>

00000b5e <__mulsf3_pse>:
 b5e:	95 9f       	mul	r25, r21
 b60:	c1 f3       	breq	.-16     	; 0xb52 <__mulsf3+0x20>
 b62:	95 0f       	add	r25, r21
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	55 1f       	adc	r21, r21
 b68:	62 9f       	mul	r22, r18
 b6a:	f0 01       	movw	r30, r0
 b6c:	72 9f       	mul	r23, r18
 b6e:	bb 27       	eor	r27, r27
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	63 9f       	mul	r22, r19
 b76:	aa 27       	eor	r26, r26
 b78:	f0 0d       	add	r31, r0
 b7a:	b1 1d       	adc	r27, r1
 b7c:	aa 1f       	adc	r26, r26
 b7e:	64 9f       	mul	r22, r20
 b80:	66 27       	eor	r22, r22
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	66 1f       	adc	r22, r22
 b88:	82 9f       	mul	r24, r18
 b8a:	22 27       	eor	r18, r18
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	73 9f       	mul	r23, r19
 b94:	b0 0d       	add	r27, r0
 b96:	a1 1d       	adc	r26, r1
 b98:	62 1f       	adc	r22, r18
 b9a:	83 9f       	mul	r24, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	22 1f       	adc	r18, r18
 ba2:	74 9f       	mul	r23, r20
 ba4:	33 27       	eor	r19, r19
 ba6:	a0 0d       	add	r26, r0
 ba8:	61 1d       	adc	r22, r1
 baa:	23 1f       	adc	r18, r19
 bac:	84 9f       	mul	r24, r20
 bae:	60 0d       	add	r22, r0
 bb0:	21 1d       	adc	r18, r1
 bb2:	82 2f       	mov	r24, r18
 bb4:	76 2f       	mov	r23, r22
 bb6:	6a 2f       	mov	r22, r26
 bb8:	11 24       	eor	r1, r1
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	9a f0       	brmi	.+38     	; 0xbe6 <__mulsf3_pse+0x88>
 bc0:	f1 f0       	breq	.+60     	; 0xbfe <__mulsf3_pse+0xa0>
 bc2:	88 23       	and	r24, r24
 bc4:	4a f0       	brmi	.+18     	; 0xbd8 <__mulsf3_pse+0x7a>
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	bb 1f       	adc	r27, r27
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__mulsf3_pse+0x64>
 bd8:	9e 3f       	cpi	r25, 0xFE	; 254
 bda:	51 05       	cpc	r21, r1
 bdc:	80 f0       	brcs	.+32     	; 0xbfe <__mulsf3_pse+0xa0>
 bde:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 be2:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 be6:	5f 3f       	cpi	r21, 0xFF	; 255
 be8:	e4 f3       	brlt	.-8      	; 0xbe2 <__mulsf3_pse+0x84>
 bea:	98 3e       	cpi	r25, 0xE8	; 232
 bec:	d4 f3       	brlt	.-12     	; 0xbe2 <__mulsf3_pse+0x84>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f7 95       	ror	r31
 bf8:	e7 95       	ror	r30
 bfa:	9f 5f       	subi	r25, 0xFF	; 255
 bfc:	c1 f7       	brne	.-16     	; 0xbee <__mulsf3_pse+0x90>
 bfe:	fe 2b       	or	r31, r30
 c00:	88 0f       	add	r24, r24
 c02:	91 1d       	adc	r25, r1
 c04:	96 95       	lsr	r25
 c06:	87 95       	ror	r24
 c08:	97 f9       	bld	r25, 7
 c0a:	08 95       	ret

00000c0c <__umulhisi3>:
 c0c:	a2 9f       	mul	r26, r18
 c0e:	b0 01       	movw	r22, r0
 c10:	b3 9f       	mul	r27, r19
 c12:	c0 01       	movw	r24, r0
 c14:	a3 9f       	mul	r26, r19
 c16:	70 0d       	add	r23, r0
 c18:	81 1d       	adc	r24, r1
 c1a:	11 24       	eor	r1, r1
 c1c:	91 1d       	adc	r25, r1
 c1e:	b2 9f       	mul	r27, r18
 c20:	70 0d       	add	r23, r0
 c22:	81 1d       	adc	r24, r1
 c24:	11 24       	eor	r1, r1
 c26:	91 1d       	adc	r25, r1
 c28:	08 95       	ret

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
