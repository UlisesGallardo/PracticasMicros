
Reloj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000aae  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001438  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000804  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007aa  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  00003250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000084d  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  7a:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_i2c>:
}


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
}
  82:	8d ef       	ldi	r24, 0xFD	; 253
  84:	80 b9       	out	0x00, r24	; 0
  86:	11 b8       	out	0x01, r1	; 1
  88:	84 ea       	ldi	r24, 0xA4	; 164
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	08 95       	ret

0000008e <i2c_readAck>:
  8e:	84 ec       	ldi	r24, 0xC4	; 196
  90:	86 bf       	out	0x36, r24	; 54
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <i2c_readAck+0x4>
  98:	83 b1       	in	r24, 0x03	; 3
  9a:	08 95       	ret

0000009c <i2c_readNack>:
  9c:	84 e8       	ldi	r24, 0x84	; 132
  9e:	86 bf       	out	0x36, r24	; 54
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <i2c_readNack+0x4>
  a6:	83 b1       	in	r24, 0x03	; 3
  a8:	08 95       	ret

000000aa <i2c_stop>:
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	86 bf       	out	0x36, r24	; 54
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	04 fc       	sbrc	r0, 4
  b2:	fd cf       	rjmp	.-6      	; 0xae <i2c_stop+0x4>
  b4:	08 95       	ret

000000b6 <i2c_write>:
  b6:	83 b9       	out	0x03, r24	; 3
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	86 bf       	out	0x36, r24	; 54
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <i2c_write+0x6>
  c2:	81 b1       	in	r24, 0x01	; 1
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	88 32       	cpi	r24, 0x28	; 40
  c8:	11 f0       	breq	.+4      	; 0xce <i2c_write+0x18>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	08 95       	ret
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret

000000d2 <i2c_start1>:
  d2:	84 ea       	ldi	r24, 0xA4	; 164
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <i2c_start1+0x4>
  dc:	08 95       	ret

000000de <DS3231_Set_Date_Time>:
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	c8 2f       	mov	r28, r24
  e6:	d6 2f       	mov	r29, r22
  e8:	14 2f       	mov	r17, r20
  ea:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_start1>
  ee:	80 ed       	ldi	r24, 0xD0	; 208
  f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
  fa:	81 2f       	mov	r24, r17
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
 100:	8d 2f       	mov	r24, r29
 102:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
 10c:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_stop>
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <ds3231_GetDateTime>:
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
 11e:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_start1>
 122:	80 ed       	ldi	r24, 0xD0	; 208
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
 12e:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_stop>
 132:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_start1>
 136:	81 ed       	ldi	r24, 0xD1	; 209
 138:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
 13c:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_readAck>
 140:	88 83       	st	Y, r24
 142:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_readAck>
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_readAck>
 14c:	8a 83       	std	Y+2, r24	; 0x02
 14e:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_readAck>
 152:	8b 83       	std	Y+3, r24	; 0x03
 154:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_readAck>
 158:	8c 83       	std	Y+4, r24	; 0x04
 15a:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_readAck>
 15e:	8d 83       	std	Y+5, r24	; 0x05
 160:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_readNack>
 164:	8e 83       	std	Y+6, r24	; 0x06
 166:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_stop>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <uno_en_bit>:

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
 170:	fc 01       	movw	r30, r24
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <uno_en_bit+0xe>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <uno_en_bit+0xa>
}
 182:	82 23       	and	r24, r18
 184:	08 95       	ret

00000186 <saca_uno>:
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
 186:	fc 01       	movw	r30, r24
 188:	40 81       	ld	r20, Z
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <saca_uno+0xe>
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <saca_uno+0xa>
 198:	24 2b       	or	r18, r20
 19a:	20 83       	st	Z, r18
 19c:	08 95       	ret

0000019e <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
 19e:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
 1a0:	90 81       	ld	r25, Z
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <saca_cero+0xe>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <saca_cero+0xa>
 1b0:	20 95       	com	r18
 1b2:	29 23       	and	r18, r25
 1b4:	20 83       	st	Z, r18
 1b6:	08 95       	ret

000001b8 <LCD_wr_inst_ini>:
	LCD_wait_flag();
	
}

void LCD_wr_inst_ini(uint8_t instruccion){
	PORTLCD=instruccion; //Saco el dato y le digo que escribiré un dato
 1b8:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD,RS);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	8b e3       	ldi	r24, 0x3B	; 59
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_cero(&PORTLCD,RW);
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	8b e3       	ldi	r24, 0x3B	; 59
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_uno(&PORTLCD,E);
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	8b e3       	ldi	r24, 0x3B	; 59
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	83 ec       	ldi	r24, 0xC3	; 195
 1da:	99 e0       	ldi	r25, 0x09	; 9
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_wr_inst_ini+0x24>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_wr_inst_ini+0x2a>
 1e2:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1e4:	66 e0       	ldi	r22, 0x06	; 6
 1e6:	8b e3       	ldi	r24, 0x3B	; 59
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
 1ee:	08 95       	ret

000001f0 <LCD_wait_flag>:
}


void LCD_wait_flag(void){
	//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo demás salida
 1f0:	8a b3       	in	r24, 0x1a	; 26
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	8a bb       	out	0x1a, r24	; 26
	saca_cero(&PORTLCD,RS);// Instrucción
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	8b e3       	ldi	r24, 0x3B	; 59
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	8b e3       	ldi	r24, 0x3B	; 59
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 20a:	66 e0       	ldi	r22, 0x06	; 6
 20c:	8b e3       	ldi	r24, 0x3B	; 59
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
 214:	83 ec       	ldi	r24, 0xC3	; 195
 216:	99 e0       	ldi	r25, 0x09	; 9
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 21e:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 220:	66 e0       	ldi	r22, 0x06	; 6
 222:	8b e3       	ldi	r24, 0x3B	; 59
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
		if(uno_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	89 e3       	ldi	r24, 0x39	; 57
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 b8 00 	call	0x170	; 0x170 <uno_en_bit>
 234:	81 11       	cpse	r24, r1
 236:	15 c0       	rjmp	.+42     	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	9a 95       	dec	r25
 23c:	f1 f7       	brne	.-4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23e:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 240:	66 e0       	ldi	r22, 0x06	; 6
 242:	8b e3       	ldi	r24, 0x3B	; 59
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	83 ec       	ldi	r24, 0xC3	; 195
 24c:	99 e0       	ldi	r25, 0x09	; 9
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
 254:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 256:	66 e0       	ldi	r22, 0x06	; 6
 258:	8b e3       	ldi	r24, 0x3B	; 59
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	}
 260:	d4 cf       	rjmp	.-88     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 262:	66 e0       	ldi	r22, 0x06	; 6
 264:	8b e3       	ldi	r24, 0x3B	; 59
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
 26c:	83 ec       	ldi	r24, 0xC3	; 195
 26e:	99 e0       	ldi	r25, 0x09	; 9
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
 276:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 278:	66 e0       	ldi	r22, 0x06	; 6
 27a:	8b e3       	ldi	r24, 0x3B	; 59
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 282:	64 e0       	ldi	r22, 0x04	; 4
 284:	8b e3       	ldi	r24, 0x3B	; 59
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_cero(&PORTLCD,RW);
 28c:	65 e0       	ldi	r22, 0x05	; 5
 28e:	8b e3       	ldi	r24, 0x3B	; 59
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 296:	8a b3       	in	r24, 0x1a	; 26
 298:	8f 67       	ori	r24, 0x7F	; 127
 29a:	8a bb       	out	0x1a, r24	; 26
 29c:	08 95       	ret

0000029e <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(uint8_t data){
 29e:	cf 93       	push	r28
 2a0:	c8 2f       	mov	r28, r24
	//saco la parte más significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribiré un dato
 2a2:	82 95       	swap	r24
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	8b bb       	out	0x1b, r24	; 27
	saca_uno(&PORTLCD,RS);
 2a8:	64 e0       	ldi	r22, 0x04	; 4
 2aa:	8b e3       	ldi	r24, 0x3B	; 59
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
	saca_cero(&PORTLCD,RW);
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	8b e3       	ldi	r24, 0x3B	; 59
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_uno(&PORTLCD,E);
 2bc:	66 e0       	ldi	r22, 0x06	; 6
 2be:	8b e3       	ldi	r24, 0x3B	; 59
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
 2c6:	83 ec       	ldi	r24, 0xC3	; 195
 2c8:	99 e0       	ldi	r25, 0x09	; 9
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_wr_char+0x2c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_wr_char+0x32>
 2d0:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2d2:	66 e0       	ldi	r22, 0x06	; 6
 2d4:	8b e3       	ldi	r24, 0x3B	; 59
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribiré un dato
 2dc:	cf 70       	andi	r28, 0x0F	; 15
 2de:	cb bb       	out	0x1b, r28	; 27
	saca_uno(&PORTLCD,RS);
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	8b e3       	ldi	r24, 0x3B	; 59
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
	saca_cero(&PORTLCD,RW);
 2ea:	65 e0       	ldi	r22, 0x05	; 5
 2ec:	8b e3       	ldi	r24, 0x3B	; 59
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_uno(&PORTLCD,E);
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	8b e3       	ldi	r24, 0x3B	; 59
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
 2fe:	83 ec       	ldi	r24, 0xC3	; 195
 300:	99 e0       	ldi	r25, 0x09	; 9
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_wr_char+0x64>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_wr_char+0x6a>
 308:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 30a:	66 e0       	ldi	r22, 0x06	; 6
 30c:	8b e3       	ldi	r24, 0x3B	; 59
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_cero(&PORTLCD,RS);
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	8b e3       	ldi	r24, 0x3B	; 59
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	LCD_wait_flag();
 31e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_wait_flag>
	
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <LCD_wr_string>:
		LCD_printTime(rn);
    }
}


void LCD_wr_string(volatile uint8_t *s){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	fc 01       	movw	r30, r24
	uint8_t c;
	while((c=*s++)){
 32c:	03 c0       	rjmp	.+6      	; 0x334 <LCD_wr_string+0xe>
		LCD_wr_char(c);
 32e:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_wr_char>
}


void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c=*s++)){
 332:	fe 01       	movw	r30, r28
 334:	ef 01       	movw	r28, r30
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	80 81       	ld	r24, Z
 33a:	81 11       	cpse	r24, r1
 33c:	f8 cf       	rjmp	.-16     	; 0x32e <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 344:	cf 93       	push	r28
 346:	c8 2f       	mov	r28, r24
	//saco la parte más significativa de la instrucción
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribiré un dato
 348:	82 95       	swap	r24
 34a:	8f 70       	andi	r24, 0x0F	; 15
 34c:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD,RS);
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	8b e3       	ldi	r24, 0x3B	; 59
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_cero(&PORTLCD,RW);
 358:	65 e0       	ldi	r22, 0x05	; 5
 35a:	8b e3       	ldi	r24, 0x3B	; 59
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_uno(&PORTLCD,E);
 362:	66 e0       	ldi	r22, 0x06	; 6
 364:	8b e3       	ldi	r24, 0x3B	; 59
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
 36c:	83 ec       	ldi	r24, 0xC3	; 195
 36e:	99 e0       	ldi	r25, 0x09	; 9
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_wr_instruction+0x2c>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_wr_instruction+0x32>
 376:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 378:	66 e0       	ldi	r22, 0x06	; 6
 37a:	8b e3       	ldi	r24, 0x3B	; 59
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	//saco la parte menos significativa de la instrucción
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribiré un dato
 382:	cf 70       	andi	r28, 0x0F	; 15
 384:	cb bb       	out	0x1b, r28	; 27
	saca_cero(&PORTLCD,RS);
 386:	64 e0       	ldi	r22, 0x04	; 4
 388:	8b e3       	ldi	r24, 0x3B	; 59
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_cero(&PORTLCD,RW);
 390:	65 e0       	ldi	r22, 0x05	; 5
 392:	8b e3       	ldi	r24, 0x3B	; 59
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	saca_uno(&PORTLCD,E);
 39a:	66 e0       	ldi	r22, 0x06	; 6
 39c:	8b e3       	ldi	r24, 0x3B	; 59
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 c3 00 	call	0x186	; 0x186 <saca_uno>
 3a4:	83 ec       	ldi	r24, 0xC3	; 195
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_wr_instruction+0x64>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_wr_instruction+0x6a>
 3ae:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	8b e3       	ldi	r24, 0x3B	; 59
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 cf 00 	call	0x19e	; 0x19e <saca_cero>
	LCD_wait_flag();
 3ba:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_wait_flag>
}
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <LCD_printTime>:

	i2c_stop();                              // Stop I2C communication after reading the Date
}


void LCD_printTime(rtc_t rtc){
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	a7 97       	sbiw	r28, 0x27	; 39
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
	uint16_t c[16];
	sprintf(c,"hora %d:%d,%d", rtc.hour, rtc.min, rtc.sec);
 3da:	1f 92       	push	r1
 3dc:	2f 93       	push	r18
 3de:	1f 92       	push	r1
 3e0:	3f 93       	push	r19
 3e2:	1f 92       	push	r1
 3e4:	4f 93       	push	r20
 3e6:	80 e6       	ldi	r24, 0x60	; 96
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9f 93       	push	r25
 3ec:	8f 93       	push	r24
 3ee:	8e 01       	movw	r16, r28
 3f0:	0f 5f       	subi	r16, 0xFF	; 255
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
 3f4:	1f 93       	push	r17
 3f6:	0f 93       	push	r16
 3f8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <sprintf>
	LCD_wr_instruction(0b10000000);
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_wr_instruction>
	LCD_wr_string(c);
 402:	c8 01       	movw	r24, r16
 404:	0e 94 93 01 	call	0x326	; 0x326 <LCD_wr_string>
}
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	a7 96       	adiw	r28, 0x27	; 39
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	08 95       	ret

00000428 <LCD_init>:
		LCD_wr_char(c);
	}
}

void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 428:	8f e7       	ldi	r24, 0x7F	; 127
 42a:	8a bb       	out	0x1a, r24	; 26
 42c:	85 ea       	ldi	r24, 0xA5	; 165
 42e:	9e e0       	ldi	r25, 0x0E	; 14
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <LCD_init+0x8>
 434:	00 c0       	rjmp	.+0      	; 0x436 <LCD_init+0xe>
 436:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_wr_inst_ini>
 43e:	81 ee       	ldi	r24, 0xE1	; 225
 440:	94 e0       	ldi	r25, 0x04	; 4
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCD_init+0x1a>
 446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_init+0x20>
 448:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	91 e2       	ldi	r25, 0x21	; 33
 452:	9a 95       	dec	r25
 454:	f1 f7       	brne	.-4      	; 0x452 <LCD_init+0x2a>
 456:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_wr_inst_ini>
 45e:	81 e2       	ldi	r24, 0x21	; 33
 460:	8a 95       	dec	r24
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_wr_inst_ini>
 46c:	91 e2       	ldi	r25, 0x21	; 33
 46e:	9a 95       	dec	r25
 470:	f1 f7       	brne	.-4      	; 0x46e <__stack+0xf>
 472:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, número de líneas y tipo de letra
 474:	88 e2       	ldi	r24, 0x28	; 40
 476:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 47a:	88 e0       	ldi	r24, 0x08	; 8
 47c:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 486:	86 e0       	ldi	r24, 0x06	; 6
 488:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 48c:	8c e0       	ldi	r24, 0x0C	; 12
 48e:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_wr_instruction>
 492:	08 95       	ret

00000494 <main>:
	LCD_wr_instruction(0b10000000);
	LCD_wr_string(c);
}

int main(void)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	27 97       	sbiw	r28, 0x07	; 7
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 4a8:	0e 94 14 02 	call	0x428	; 0x428 <LCD_init>
	init_i2c();
 4ac:	0e 94 41 00 	call	0x82	; 0x82 <init_i2c>
	DS3231_Set_Date_Time(18,0,0);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	82 e1       	ldi	r24, 0x12	; 18
 4b6:	0e 94 6f 00 	call	0xde	; 0xde <DS3231_Set_Date_Time>
	rtc_t rn;
    while (1) 
    {
		ds3231_GetDateTime(&rn);
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	0e 94 8c 00 	call	0x118	; 0x118 <ds3231_GetDateTime>
		LCD_printTime(rn);
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	3a 81       	ldd	r19, Y+2	; 0x02
 4c6:	4b 81       	ldd	r20, Y+3	; 0x03
 4c8:	5c 81       	ldd	r21, Y+4	; 0x04
 4ca:	6d 81       	ldd	r22, Y+5	; 0x05
 4cc:	7e 81       	ldd	r23, Y+6	; 0x06
 4ce:	8f 81       	ldd	r24, Y+7	; 0x07
 4d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_printTime>
 4d4:	f2 cf       	rjmp	.-28     	; 0x4ba <main+0x26>

000004d6 <sprintf>:
 4d6:	ae e0       	ldi	r26, 0x0E	; 14
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e1 e7       	ldi	r30, 0x71	; 113
 4dc:	f2 e0       	ldi	r31, 0x02	; 2
 4de:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__prologue_saves__+0x1c>
 4e2:	0d 89       	ldd	r16, Y+21	; 0x15
 4e4:	1e 89       	ldd	r17, Y+22	; 0x16
 4e6:	86 e0       	ldi	r24, 0x06	; 6
 4e8:	8c 83       	std	Y+4, r24	; 0x04
 4ea:	1a 83       	std	Y+2, r17	; 0x02
 4ec:	09 83       	std	Y+1, r16	; 0x01
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	9f e7       	ldi	r25, 0x7F	; 127
 4f2:	9e 83       	std	Y+6, r25	; 0x06
 4f4:	8d 83       	std	Y+5, r24	; 0x05
 4f6:	ae 01       	movw	r20, r28
 4f8:	47 5e       	subi	r20, 0xE7	; 231
 4fa:	5f 4f       	sbci	r21, 0xFF	; 255
 4fc:	6f 89       	ldd	r22, Y+23	; 0x17
 4fe:	78 8d       	ldd	r23, Y+24	; 0x18
 500:	ce 01       	movw	r24, r28
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	0e 94 8d 02 	call	0x51a	; 0x51a <vfprintf>
 508:	ef 81       	ldd	r30, Y+7	; 0x07
 50a:	f8 85       	ldd	r31, Y+8	; 0x08
 50c:	e0 0f       	add	r30, r16
 50e:	f1 1f       	adc	r31, r17
 510:	10 82       	st	Z, r1
 512:	2e 96       	adiw	r28, 0x0e	; 14
 514:	e4 e0       	ldi	r30, 0x04	; 4
 516:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__epilogue_restores__+0x1c>

0000051a <vfprintf>:
 51a:	ab e0       	ldi	r26, 0x0B	; 11
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e3 e9       	ldi	r30, 0x93	; 147
 520:	f2 e0       	ldi	r31, 0x02	; 2
 522:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__prologue_saves__>
 526:	6c 01       	movw	r12, r24
 528:	7b 01       	movw	r14, r22
 52a:	8a 01       	movw	r16, r20
 52c:	fc 01       	movw	r30, r24
 52e:	17 82       	std	Z+7, r1	; 0x07
 530:	16 82       	std	Z+6, r1	; 0x06
 532:	83 81       	ldd	r24, Z+3	; 0x03
 534:	81 ff       	sbrs	r24, 1
 536:	cc c1       	rjmp	.+920    	; 0x8d0 <vfprintf+0x3b6>
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	3c 01       	movw	r6, r24
 53e:	f6 01       	movw	r30, r12
 540:	93 81       	ldd	r25, Z+3	; 0x03
 542:	f7 01       	movw	r30, r14
 544:	93 fd       	sbrc	r25, 3
 546:	85 91       	lpm	r24, Z+
 548:	93 ff       	sbrs	r25, 3
 54a:	81 91       	ld	r24, Z+
 54c:	7f 01       	movw	r14, r30
 54e:	88 23       	and	r24, r24
 550:	09 f4       	brne	.+2      	; 0x554 <vfprintf+0x3a>
 552:	ba c1       	rjmp	.+884    	; 0x8c8 <vfprintf+0x3ae>
 554:	85 32       	cpi	r24, 0x25	; 37
 556:	39 f4       	brne	.+14     	; 0x566 <vfprintf+0x4c>
 558:	93 fd       	sbrc	r25, 3
 55a:	85 91       	lpm	r24, Z+
 55c:	93 ff       	sbrs	r25, 3
 55e:	81 91       	ld	r24, Z+
 560:	7f 01       	movw	r14, r30
 562:	85 32       	cpi	r24, 0x25	; 37
 564:	29 f4       	brne	.+10     	; 0x570 <vfprintf+0x56>
 566:	b6 01       	movw	r22, r12
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 56e:	e7 cf       	rjmp	.-50     	; 0x53e <vfprintf+0x24>
 570:	91 2c       	mov	r9, r1
 572:	21 2c       	mov	r2, r1
 574:	31 2c       	mov	r3, r1
 576:	ff e1       	ldi	r31, 0x1F	; 31
 578:	f3 15       	cp	r31, r3
 57a:	d8 f0       	brcs	.+54     	; 0x5b2 <vfprintf+0x98>
 57c:	8b 32       	cpi	r24, 0x2B	; 43
 57e:	79 f0       	breq	.+30     	; 0x59e <vfprintf+0x84>
 580:	38 f4       	brcc	.+14     	; 0x590 <vfprintf+0x76>
 582:	80 32       	cpi	r24, 0x20	; 32
 584:	79 f0       	breq	.+30     	; 0x5a4 <vfprintf+0x8a>
 586:	83 32       	cpi	r24, 0x23	; 35
 588:	a1 f4       	brne	.+40     	; 0x5b2 <vfprintf+0x98>
 58a:	23 2d       	mov	r18, r3
 58c:	20 61       	ori	r18, 0x10	; 16
 58e:	1d c0       	rjmp	.+58     	; 0x5ca <vfprintf+0xb0>
 590:	8d 32       	cpi	r24, 0x2D	; 45
 592:	61 f0       	breq	.+24     	; 0x5ac <vfprintf+0x92>
 594:	80 33       	cpi	r24, 0x30	; 48
 596:	69 f4       	brne	.+26     	; 0x5b2 <vfprintf+0x98>
 598:	23 2d       	mov	r18, r3
 59a:	21 60       	ori	r18, 0x01	; 1
 59c:	16 c0       	rjmp	.+44     	; 0x5ca <vfprintf+0xb0>
 59e:	83 2d       	mov	r24, r3
 5a0:	82 60       	ori	r24, 0x02	; 2
 5a2:	38 2e       	mov	r3, r24
 5a4:	e3 2d       	mov	r30, r3
 5a6:	e4 60       	ori	r30, 0x04	; 4
 5a8:	3e 2e       	mov	r3, r30
 5aa:	2a c0       	rjmp	.+84     	; 0x600 <vfprintf+0xe6>
 5ac:	f3 2d       	mov	r31, r3
 5ae:	f8 60       	ori	r31, 0x08	; 8
 5b0:	1d c0       	rjmp	.+58     	; 0x5ec <vfprintf+0xd2>
 5b2:	37 fc       	sbrc	r3, 7
 5b4:	2d c0       	rjmp	.+90     	; 0x610 <vfprintf+0xf6>
 5b6:	20 ed       	ldi	r18, 0xD0	; 208
 5b8:	28 0f       	add	r18, r24
 5ba:	2a 30       	cpi	r18, 0x0A	; 10
 5bc:	40 f0       	brcs	.+16     	; 0x5ce <vfprintf+0xb4>
 5be:	8e 32       	cpi	r24, 0x2E	; 46
 5c0:	b9 f4       	brne	.+46     	; 0x5f0 <vfprintf+0xd6>
 5c2:	36 fc       	sbrc	r3, 6
 5c4:	81 c1       	rjmp	.+770    	; 0x8c8 <vfprintf+0x3ae>
 5c6:	23 2d       	mov	r18, r3
 5c8:	20 64       	ori	r18, 0x40	; 64
 5ca:	32 2e       	mov	r3, r18
 5cc:	19 c0       	rjmp	.+50     	; 0x600 <vfprintf+0xe6>
 5ce:	36 fe       	sbrs	r3, 6
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <vfprintf+0xc4>
 5d2:	8a e0       	ldi	r24, 0x0A	; 10
 5d4:	98 9e       	mul	r9, r24
 5d6:	20 0d       	add	r18, r0
 5d8:	11 24       	eor	r1, r1
 5da:	92 2e       	mov	r9, r18
 5dc:	11 c0       	rjmp	.+34     	; 0x600 <vfprintf+0xe6>
 5de:	ea e0       	ldi	r30, 0x0A	; 10
 5e0:	2e 9e       	mul	r2, r30
 5e2:	20 0d       	add	r18, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	22 2e       	mov	r2, r18
 5e8:	f3 2d       	mov	r31, r3
 5ea:	f0 62       	ori	r31, 0x20	; 32
 5ec:	3f 2e       	mov	r3, r31
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <vfprintf+0xe6>
 5f0:	8c 36       	cpi	r24, 0x6C	; 108
 5f2:	21 f4       	brne	.+8      	; 0x5fc <vfprintf+0xe2>
 5f4:	83 2d       	mov	r24, r3
 5f6:	80 68       	ori	r24, 0x80	; 128
 5f8:	38 2e       	mov	r3, r24
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <vfprintf+0xe6>
 5fc:	88 36       	cpi	r24, 0x68	; 104
 5fe:	41 f4       	brne	.+16     	; 0x610 <vfprintf+0xf6>
 600:	f7 01       	movw	r30, r14
 602:	93 fd       	sbrc	r25, 3
 604:	85 91       	lpm	r24, Z+
 606:	93 ff       	sbrs	r25, 3
 608:	81 91       	ld	r24, Z+
 60a:	7f 01       	movw	r14, r30
 60c:	81 11       	cpse	r24, r1
 60e:	b3 cf       	rjmp	.-154    	; 0x576 <vfprintf+0x5c>
 610:	98 2f       	mov	r25, r24
 612:	9f 7d       	andi	r25, 0xDF	; 223
 614:	95 54       	subi	r25, 0x45	; 69
 616:	93 30       	cpi	r25, 0x03	; 3
 618:	28 f4       	brcc	.+10     	; 0x624 <vfprintf+0x10a>
 61a:	0c 5f       	subi	r16, 0xFC	; 252
 61c:	1f 4f       	sbci	r17, 0xFF	; 255
 61e:	9f e3       	ldi	r25, 0x3F	; 63
 620:	99 83       	std	Y+1, r25	; 0x01
 622:	0d c0       	rjmp	.+26     	; 0x63e <vfprintf+0x124>
 624:	83 36       	cpi	r24, 0x63	; 99
 626:	31 f0       	breq	.+12     	; 0x634 <vfprintf+0x11a>
 628:	83 37       	cpi	r24, 0x73	; 115
 62a:	71 f0       	breq	.+28     	; 0x648 <vfprintf+0x12e>
 62c:	83 35       	cpi	r24, 0x53	; 83
 62e:	09 f0       	breq	.+2      	; 0x632 <vfprintf+0x118>
 630:	59 c0       	rjmp	.+178    	; 0x6e4 <vfprintf+0x1ca>
 632:	21 c0       	rjmp	.+66     	; 0x676 <vfprintf+0x15c>
 634:	f8 01       	movw	r30, r16
 636:	80 81       	ld	r24, Z
 638:	89 83       	std	Y+1, r24	; 0x01
 63a:	0e 5f       	subi	r16, 0xFE	; 254
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	88 24       	eor	r8, r8
 640:	83 94       	inc	r8
 642:	91 2c       	mov	r9, r1
 644:	53 01       	movw	r10, r6
 646:	13 c0       	rjmp	.+38     	; 0x66e <vfprintf+0x154>
 648:	28 01       	movw	r4, r16
 64a:	f2 e0       	ldi	r31, 0x02	; 2
 64c:	4f 0e       	add	r4, r31
 64e:	51 1c       	adc	r5, r1
 650:	f8 01       	movw	r30, r16
 652:	a0 80       	ld	r10, Z
 654:	b1 80       	ldd	r11, Z+1	; 0x01
 656:	36 fe       	sbrs	r3, 6
 658:	03 c0       	rjmp	.+6      	; 0x660 <vfprintf+0x146>
 65a:	69 2d       	mov	r22, r9
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vfprintf+0x14a>
 660:	6f ef       	ldi	r22, 0xFF	; 255
 662:	7f ef       	ldi	r23, 0xFF	; 255
 664:	c5 01       	movw	r24, r10
 666:	0e 94 79 04 	call	0x8f2	; 0x8f2 <strnlen>
 66a:	4c 01       	movw	r8, r24
 66c:	82 01       	movw	r16, r4
 66e:	f3 2d       	mov	r31, r3
 670:	ff 77       	andi	r31, 0x7F	; 127
 672:	3f 2e       	mov	r3, r31
 674:	16 c0       	rjmp	.+44     	; 0x6a2 <vfprintf+0x188>
 676:	28 01       	movw	r4, r16
 678:	22 e0       	ldi	r18, 0x02	; 2
 67a:	42 0e       	add	r4, r18
 67c:	51 1c       	adc	r5, r1
 67e:	f8 01       	movw	r30, r16
 680:	a0 80       	ld	r10, Z
 682:	b1 80       	ldd	r11, Z+1	; 0x01
 684:	36 fe       	sbrs	r3, 6
 686:	03 c0       	rjmp	.+6      	; 0x68e <vfprintf+0x174>
 688:	69 2d       	mov	r22, r9
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <vfprintf+0x178>
 68e:	6f ef       	ldi	r22, 0xFF	; 255
 690:	7f ef       	ldi	r23, 0xFF	; 255
 692:	c5 01       	movw	r24, r10
 694:	0e 94 6e 04 	call	0x8dc	; 0x8dc <strnlen_P>
 698:	4c 01       	movw	r8, r24
 69a:	f3 2d       	mov	r31, r3
 69c:	f0 68       	ori	r31, 0x80	; 128
 69e:	3f 2e       	mov	r3, r31
 6a0:	82 01       	movw	r16, r4
 6a2:	33 fc       	sbrc	r3, 3
 6a4:	1b c0       	rjmp	.+54     	; 0x6dc <vfprintf+0x1c2>
 6a6:	82 2d       	mov	r24, r2
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	88 16       	cp	r8, r24
 6ac:	99 06       	cpc	r9, r25
 6ae:	b0 f4       	brcc	.+44     	; 0x6dc <vfprintf+0x1c2>
 6b0:	b6 01       	movw	r22, r12
 6b2:	80 e2       	ldi	r24, 0x20	; 32
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 6ba:	2a 94       	dec	r2
 6bc:	f4 cf       	rjmp	.-24     	; 0x6a6 <vfprintf+0x18c>
 6be:	f5 01       	movw	r30, r10
 6c0:	37 fc       	sbrc	r3, 7
 6c2:	85 91       	lpm	r24, Z+
 6c4:	37 fe       	sbrs	r3, 7
 6c6:	81 91       	ld	r24, Z+
 6c8:	5f 01       	movw	r10, r30
 6ca:	b6 01       	movw	r22, r12
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 6d2:	21 10       	cpse	r2, r1
 6d4:	2a 94       	dec	r2
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	82 1a       	sub	r8, r18
 6da:	91 08       	sbc	r9, r1
 6dc:	81 14       	cp	r8, r1
 6de:	91 04       	cpc	r9, r1
 6e0:	71 f7       	brne	.-36     	; 0x6be <vfprintf+0x1a4>
 6e2:	e8 c0       	rjmp	.+464    	; 0x8b4 <vfprintf+0x39a>
 6e4:	84 36       	cpi	r24, 0x64	; 100
 6e6:	11 f0       	breq	.+4      	; 0x6ec <vfprintf+0x1d2>
 6e8:	89 36       	cpi	r24, 0x69	; 105
 6ea:	41 f5       	brne	.+80     	; 0x73c <vfprintf+0x222>
 6ec:	f8 01       	movw	r30, r16
 6ee:	37 fe       	sbrs	r3, 7
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <vfprintf+0x1e6>
 6f2:	60 81       	ld	r22, Z
 6f4:	71 81       	ldd	r23, Z+1	; 0x01
 6f6:	82 81       	ldd	r24, Z+2	; 0x02
 6f8:	93 81       	ldd	r25, Z+3	; 0x03
 6fa:	0c 5f       	subi	r16, 0xFC	; 252
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <vfprintf+0x1f6>
 700:	60 81       	ld	r22, Z
 702:	71 81       	ldd	r23, Z+1	; 0x01
 704:	07 2e       	mov	r0, r23
 706:	00 0c       	add	r0, r0
 708:	88 0b       	sbc	r24, r24
 70a:	99 0b       	sbc	r25, r25
 70c:	0e 5f       	subi	r16, 0xFE	; 254
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	f3 2d       	mov	r31, r3
 712:	ff 76       	andi	r31, 0x6F	; 111
 714:	3f 2e       	mov	r3, r31
 716:	97 ff       	sbrs	r25, 7
 718:	09 c0       	rjmp	.+18     	; 0x72c <vfprintf+0x212>
 71a:	90 95       	com	r25
 71c:	80 95       	com	r24
 71e:	70 95       	com	r23
 720:	61 95       	neg	r22
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	f0 68       	ori	r31, 0x80	; 128
 72a:	3f 2e       	mov	r3, r31
 72c:	2a e0       	ldi	r18, 0x0A	; 10
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	a3 01       	movw	r20, r6
 732:	0e 94 c0 04 	call	0x980	; 0x980 <__ultoa_invert>
 736:	88 2e       	mov	r8, r24
 738:	86 18       	sub	r8, r6
 73a:	45 c0       	rjmp	.+138    	; 0x7c6 <vfprintf+0x2ac>
 73c:	85 37       	cpi	r24, 0x75	; 117
 73e:	31 f4       	brne	.+12     	; 0x74c <vfprintf+0x232>
 740:	23 2d       	mov	r18, r3
 742:	2f 7e       	andi	r18, 0xEF	; 239
 744:	b2 2e       	mov	r11, r18
 746:	2a e0       	ldi	r18, 0x0A	; 10
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	25 c0       	rjmp	.+74     	; 0x796 <vfprintf+0x27c>
 74c:	93 2d       	mov	r25, r3
 74e:	99 7f       	andi	r25, 0xF9	; 249
 750:	b9 2e       	mov	r11, r25
 752:	8f 36       	cpi	r24, 0x6F	; 111
 754:	c1 f0       	breq	.+48     	; 0x786 <vfprintf+0x26c>
 756:	18 f4       	brcc	.+6      	; 0x75e <vfprintf+0x244>
 758:	88 35       	cpi	r24, 0x58	; 88
 75a:	79 f0       	breq	.+30     	; 0x77a <vfprintf+0x260>
 75c:	b5 c0       	rjmp	.+362    	; 0x8c8 <vfprintf+0x3ae>
 75e:	80 37       	cpi	r24, 0x70	; 112
 760:	19 f0       	breq	.+6      	; 0x768 <vfprintf+0x24e>
 762:	88 37       	cpi	r24, 0x78	; 120
 764:	21 f0       	breq	.+8      	; 0x76e <vfprintf+0x254>
 766:	b0 c0       	rjmp	.+352    	; 0x8c8 <vfprintf+0x3ae>
 768:	e9 2f       	mov	r30, r25
 76a:	e0 61       	ori	r30, 0x10	; 16
 76c:	be 2e       	mov	r11, r30
 76e:	b4 fe       	sbrs	r11, 4
 770:	0d c0       	rjmp	.+26     	; 0x78c <vfprintf+0x272>
 772:	fb 2d       	mov	r31, r11
 774:	f4 60       	ori	r31, 0x04	; 4
 776:	bf 2e       	mov	r11, r31
 778:	09 c0       	rjmp	.+18     	; 0x78c <vfprintf+0x272>
 77a:	34 fe       	sbrs	r3, 4
 77c:	0a c0       	rjmp	.+20     	; 0x792 <vfprintf+0x278>
 77e:	29 2f       	mov	r18, r25
 780:	26 60       	ori	r18, 0x06	; 6
 782:	b2 2e       	mov	r11, r18
 784:	06 c0       	rjmp	.+12     	; 0x792 <vfprintf+0x278>
 786:	28 e0       	ldi	r18, 0x08	; 8
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	05 c0       	rjmp	.+10     	; 0x796 <vfprintf+0x27c>
 78c:	20 e1       	ldi	r18, 0x10	; 16
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0x27c>
 792:	20 e1       	ldi	r18, 0x10	; 16
 794:	32 e0       	ldi	r19, 0x02	; 2
 796:	f8 01       	movw	r30, r16
 798:	b7 fe       	sbrs	r11, 7
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <vfprintf+0x290>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	82 81       	ldd	r24, Z+2	; 0x02
 7a2:	93 81       	ldd	r25, Z+3	; 0x03
 7a4:	0c 5f       	subi	r16, 0xFC	; 252
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x29c>
 7aa:	60 81       	ld	r22, Z
 7ac:	71 81       	ldd	r23, Z+1	; 0x01
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 5f       	subi	r16, 0xFE	; 254
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	a3 01       	movw	r20, r6
 7b8:	0e 94 c0 04 	call	0x980	; 0x980 <__ultoa_invert>
 7bc:	88 2e       	mov	r8, r24
 7be:	86 18       	sub	r8, r6
 7c0:	fb 2d       	mov	r31, r11
 7c2:	ff 77       	andi	r31, 0x7F	; 127
 7c4:	3f 2e       	mov	r3, r31
 7c6:	36 fe       	sbrs	r3, 6
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <vfprintf+0x2ca>
 7ca:	23 2d       	mov	r18, r3
 7cc:	2e 7f       	andi	r18, 0xFE	; 254
 7ce:	a2 2e       	mov	r10, r18
 7d0:	89 14       	cp	r8, r9
 7d2:	58 f4       	brcc	.+22     	; 0x7ea <vfprintf+0x2d0>
 7d4:	34 fe       	sbrs	r3, 4
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <vfprintf+0x2d4>
 7d8:	32 fc       	sbrc	r3, 2
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x2d4>
 7dc:	83 2d       	mov	r24, r3
 7de:	8e 7e       	andi	r24, 0xEE	; 238
 7e0:	a8 2e       	mov	r10, r24
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <vfprintf+0x2d4>
 7e4:	b8 2c       	mov	r11, r8
 7e6:	a3 2c       	mov	r10, r3
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x2d6>
 7ea:	b8 2c       	mov	r11, r8
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <vfprintf+0x2d6>
 7ee:	b9 2c       	mov	r11, r9
 7f0:	a4 fe       	sbrs	r10, 4
 7f2:	0f c0       	rjmp	.+30     	; 0x812 <vfprintf+0x2f8>
 7f4:	fe 01       	movw	r30, r28
 7f6:	e8 0d       	add	r30, r8
 7f8:	f1 1d       	adc	r31, r1
 7fa:	80 81       	ld	r24, Z
 7fc:	80 33       	cpi	r24, 0x30	; 48
 7fe:	21 f4       	brne	.+8      	; 0x808 <vfprintf+0x2ee>
 800:	9a 2d       	mov	r25, r10
 802:	99 7e       	andi	r25, 0xE9	; 233
 804:	a9 2e       	mov	r10, r25
 806:	09 c0       	rjmp	.+18     	; 0x81a <vfprintf+0x300>
 808:	a2 fe       	sbrs	r10, 2
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x2fe>
 80c:	b3 94       	inc	r11
 80e:	b3 94       	inc	r11
 810:	04 c0       	rjmp	.+8      	; 0x81a <vfprintf+0x300>
 812:	8a 2d       	mov	r24, r10
 814:	86 78       	andi	r24, 0x86	; 134
 816:	09 f0       	breq	.+2      	; 0x81a <vfprintf+0x300>
 818:	b3 94       	inc	r11
 81a:	a3 fc       	sbrc	r10, 3
 81c:	11 c0       	rjmp	.+34     	; 0x840 <vfprintf+0x326>
 81e:	a0 fe       	sbrs	r10, 0
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x314>
 822:	b2 14       	cp	r11, r2
 824:	88 f4       	brcc	.+34     	; 0x848 <vfprintf+0x32e>
 826:	28 0c       	add	r2, r8
 828:	92 2c       	mov	r9, r2
 82a:	9b 18       	sub	r9, r11
 82c:	0e c0       	rjmp	.+28     	; 0x84a <vfprintf+0x330>
 82e:	b2 14       	cp	r11, r2
 830:	60 f4       	brcc	.+24     	; 0x84a <vfprintf+0x330>
 832:	b6 01       	movw	r22, r12
 834:	80 e2       	ldi	r24, 0x20	; 32
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 83c:	b3 94       	inc	r11
 83e:	f7 cf       	rjmp	.-18     	; 0x82e <vfprintf+0x314>
 840:	b2 14       	cp	r11, r2
 842:	18 f4       	brcc	.+6      	; 0x84a <vfprintf+0x330>
 844:	2b 18       	sub	r2, r11
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x332>
 848:	98 2c       	mov	r9, r8
 84a:	21 2c       	mov	r2, r1
 84c:	a4 fe       	sbrs	r10, 4
 84e:	10 c0       	rjmp	.+32     	; 0x870 <vfprintf+0x356>
 850:	b6 01       	movw	r22, r12
 852:	80 e3       	ldi	r24, 0x30	; 48
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 85a:	a2 fe       	sbrs	r10, 2
 85c:	17 c0       	rjmp	.+46     	; 0x88c <vfprintf+0x372>
 85e:	a1 fc       	sbrc	r10, 1
 860:	03 c0       	rjmp	.+6      	; 0x868 <vfprintf+0x34e>
 862:	88 e7       	ldi	r24, 0x78	; 120
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <vfprintf+0x352>
 868:	88 e5       	ldi	r24, 0x58	; 88
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	b6 01       	movw	r22, r12
 86e:	0c c0       	rjmp	.+24     	; 0x888 <vfprintf+0x36e>
 870:	8a 2d       	mov	r24, r10
 872:	86 78       	andi	r24, 0x86	; 134
 874:	59 f0       	breq	.+22     	; 0x88c <vfprintf+0x372>
 876:	a1 fe       	sbrs	r10, 1
 878:	02 c0       	rjmp	.+4      	; 0x87e <vfprintf+0x364>
 87a:	8b e2       	ldi	r24, 0x2B	; 43
 87c:	01 c0       	rjmp	.+2      	; 0x880 <vfprintf+0x366>
 87e:	80 e2       	ldi	r24, 0x20	; 32
 880:	a7 fc       	sbrc	r10, 7
 882:	8d e2       	ldi	r24, 0x2D	; 45
 884:	b6 01       	movw	r22, r12
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 88c:	89 14       	cp	r8, r9
 88e:	38 f4       	brcc	.+14     	; 0x89e <vfprintf+0x384>
 890:	b6 01       	movw	r22, r12
 892:	80 e3       	ldi	r24, 0x30	; 48
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 89a:	9a 94       	dec	r9
 89c:	f7 cf       	rjmp	.-18     	; 0x88c <vfprintf+0x372>
 89e:	8a 94       	dec	r8
 8a0:	f3 01       	movw	r30, r6
 8a2:	e8 0d       	add	r30, r8
 8a4:	f1 1d       	adc	r31, r1
 8a6:	80 81       	ld	r24, Z
 8a8:	b6 01       	movw	r22, r12
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 8b0:	81 10       	cpse	r8, r1
 8b2:	f5 cf       	rjmp	.-22     	; 0x89e <vfprintf+0x384>
 8b4:	22 20       	and	r2, r2
 8b6:	09 f4       	brne	.+2      	; 0x8ba <vfprintf+0x3a0>
 8b8:	42 ce       	rjmp	.-892    	; 0x53e <vfprintf+0x24>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 8c4:	2a 94       	dec	r2
 8c6:	f6 cf       	rjmp	.-20     	; 0x8b4 <vfprintf+0x39a>
 8c8:	f6 01       	movw	r30, r12
 8ca:	86 81       	ldd	r24, Z+6	; 0x06
 8cc:	97 81       	ldd	r25, Z+7	; 0x07
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <vfprintf+0x3ba>
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	2b 96       	adiw	r28, 0x0b	; 11
 8d6:	e2 e1       	ldi	r30, 0x12	; 18
 8d8:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__epilogue_restores__>

000008dc <strnlen_P>:
 8dc:	fc 01       	movw	r30, r24
 8de:	05 90       	lpm	r0, Z+
 8e0:	61 50       	subi	r22, 0x01	; 1
 8e2:	70 40       	sbci	r23, 0x00	; 0
 8e4:	01 10       	cpse	r0, r1
 8e6:	d8 f7       	brcc	.-10     	; 0x8de <strnlen_P+0x2>
 8e8:	80 95       	com	r24
 8ea:	90 95       	com	r25
 8ec:	8e 0f       	add	r24, r30
 8ee:	9f 1f       	adc	r25, r31
 8f0:	08 95       	ret

000008f2 <strnlen>:
 8f2:	fc 01       	movw	r30, r24
 8f4:	61 50       	subi	r22, 0x01	; 1
 8f6:	70 40       	sbci	r23, 0x00	; 0
 8f8:	01 90       	ld	r0, Z+
 8fa:	01 10       	cpse	r0, r1
 8fc:	d8 f7       	brcc	.-10     	; 0x8f4 <strnlen+0x2>
 8fe:	80 95       	com	r24
 900:	90 95       	com	r25
 902:	8e 0f       	add	r24, r30
 904:	9f 1f       	adc	r25, r31
 906:	08 95       	ret

00000908 <fputc>:
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	fb 01       	movw	r30, r22
 912:	23 81       	ldd	r18, Z+3	; 0x03
 914:	21 fd       	sbrc	r18, 1
 916:	03 c0       	rjmp	.+6      	; 0x91e <fputc+0x16>
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	9f ef       	ldi	r25, 0xFF	; 255
 91c:	2c c0       	rjmp	.+88     	; 0x976 <fputc+0x6e>
 91e:	22 ff       	sbrs	r18, 2
 920:	16 c0       	rjmp	.+44     	; 0x94e <fputc+0x46>
 922:	46 81       	ldd	r20, Z+6	; 0x06
 924:	57 81       	ldd	r21, Z+7	; 0x07
 926:	24 81       	ldd	r18, Z+4	; 0x04
 928:	35 81       	ldd	r19, Z+5	; 0x05
 92a:	42 17       	cp	r20, r18
 92c:	53 07       	cpc	r21, r19
 92e:	44 f4       	brge	.+16     	; 0x940 <fputc+0x38>
 930:	a0 81       	ld	r26, Z
 932:	b1 81       	ldd	r27, Z+1	; 0x01
 934:	9d 01       	movw	r18, r26
 936:	2f 5f       	subi	r18, 0xFF	; 255
 938:	3f 4f       	sbci	r19, 0xFF	; 255
 93a:	31 83       	std	Z+1, r19	; 0x01
 93c:	20 83       	st	Z, r18
 93e:	8c 93       	st	X, r24
 940:	26 81       	ldd	r18, Z+6	; 0x06
 942:	37 81       	ldd	r19, Z+7	; 0x07
 944:	2f 5f       	subi	r18, 0xFF	; 255
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	37 83       	std	Z+7, r19	; 0x07
 94a:	26 83       	std	Z+6, r18	; 0x06
 94c:	14 c0       	rjmp	.+40     	; 0x976 <fputc+0x6e>
 94e:	8b 01       	movw	r16, r22
 950:	ec 01       	movw	r28, r24
 952:	fb 01       	movw	r30, r22
 954:	00 84       	ldd	r0, Z+8	; 0x08
 956:	f1 85       	ldd	r31, Z+9	; 0x09
 958:	e0 2d       	mov	r30, r0
 95a:	09 95       	icall
 95c:	89 2b       	or	r24, r25
 95e:	e1 f6       	brne	.-72     	; 0x918 <fputc+0x10>
 960:	d8 01       	movw	r26, r16
 962:	16 96       	adiw	r26, 0x06	; 6
 964:	8d 91       	ld	r24, X+
 966:	9c 91       	ld	r25, X
 968:	17 97       	sbiw	r26, 0x07	; 7
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	17 96       	adiw	r26, 0x07	; 7
 96e:	9c 93       	st	X, r25
 970:	8e 93       	st	-X, r24
 972:	16 97       	sbiw	r26, 0x06	; 6
 974:	ce 01       	movw	r24, r28
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <__ultoa_invert>:
 980:	fa 01       	movw	r30, r20
 982:	aa 27       	eor	r26, r26
 984:	28 30       	cpi	r18, 0x08	; 8
 986:	51 f1       	breq	.+84     	; 0x9dc <__ultoa_invert+0x5c>
 988:	20 31       	cpi	r18, 0x10	; 16
 98a:	81 f1       	breq	.+96     	; 0x9ec <__ultoa_invert+0x6c>
 98c:	e8 94       	clt
 98e:	6f 93       	push	r22
 990:	6e 7f       	andi	r22, 0xFE	; 254
 992:	6e 5f       	subi	r22, 0xFE	; 254
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	af 4f       	sbci	r26, 0xFF	; 255
 99c:	b1 e0       	ldi	r27, 0x01	; 1
 99e:	3e d0       	rcall	.+124    	; 0xa1c <__ultoa_invert+0x9c>
 9a0:	b4 e0       	ldi	r27, 0x04	; 4
 9a2:	3c d0       	rcall	.+120    	; 0xa1c <__ultoa_invert+0x9c>
 9a4:	67 0f       	add	r22, r23
 9a6:	78 1f       	adc	r23, r24
 9a8:	89 1f       	adc	r24, r25
 9aa:	9a 1f       	adc	r25, r26
 9ac:	a1 1d       	adc	r26, r1
 9ae:	68 0f       	add	r22, r24
 9b0:	79 1f       	adc	r23, r25
 9b2:	8a 1f       	adc	r24, r26
 9b4:	91 1d       	adc	r25, r1
 9b6:	a1 1d       	adc	r26, r1
 9b8:	6a 0f       	add	r22, r26
 9ba:	71 1d       	adc	r23, r1
 9bc:	81 1d       	adc	r24, r1
 9be:	91 1d       	adc	r25, r1
 9c0:	a1 1d       	adc	r26, r1
 9c2:	20 d0       	rcall	.+64     	; 0xa04 <__ultoa_invert+0x84>
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <__ultoa_invert+0x48>
 9c6:	68 94       	set
 9c8:	3f 91       	pop	r19
 9ca:	2a e0       	ldi	r18, 0x0A	; 10
 9cc:	26 9f       	mul	r18, r22
 9ce:	11 24       	eor	r1, r1
 9d0:	30 19       	sub	r19, r0
 9d2:	30 5d       	subi	r19, 0xD0	; 208
 9d4:	31 93       	st	Z+, r19
 9d6:	de f6       	brtc	.-74     	; 0x98e <__ultoa_invert+0xe>
 9d8:	cf 01       	movw	r24, r30
 9da:	08 95       	ret
 9dc:	46 2f       	mov	r20, r22
 9de:	47 70       	andi	r20, 0x07	; 7
 9e0:	40 5d       	subi	r20, 0xD0	; 208
 9e2:	41 93       	st	Z+, r20
 9e4:	b3 e0       	ldi	r27, 0x03	; 3
 9e6:	0f d0       	rcall	.+30     	; 0xa06 <__ultoa_invert+0x86>
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__ultoa_invert+0x5c>
 9ea:	f6 cf       	rjmp	.-20     	; 0x9d8 <__ultoa_invert+0x58>
 9ec:	46 2f       	mov	r20, r22
 9ee:	4f 70       	andi	r20, 0x0F	; 15
 9f0:	40 5d       	subi	r20, 0xD0	; 208
 9f2:	4a 33       	cpi	r20, 0x3A	; 58
 9f4:	18 f0       	brcs	.+6      	; 0x9fc <__ultoa_invert+0x7c>
 9f6:	49 5d       	subi	r20, 0xD9	; 217
 9f8:	31 fd       	sbrc	r19, 1
 9fa:	40 52       	subi	r20, 0x20	; 32
 9fc:	41 93       	st	Z+, r20
 9fe:	02 d0       	rcall	.+4      	; 0xa04 <__ultoa_invert+0x84>
 a00:	a9 f7       	brne	.-22     	; 0x9ec <__ultoa_invert+0x6c>
 a02:	ea cf       	rjmp	.-44     	; 0x9d8 <__ultoa_invert+0x58>
 a04:	b4 e0       	ldi	r27, 0x04	; 4
 a06:	a6 95       	lsr	r26
 a08:	97 95       	ror	r25
 a0a:	87 95       	ror	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	ba 95       	dec	r27
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__ultoa_invert+0x86>
 a14:	00 97       	sbiw	r24, 0x00	; 0
 a16:	61 05       	cpc	r22, r1
 a18:	71 05       	cpc	r23, r1
 a1a:	08 95       	ret
 a1c:	9b 01       	movw	r18, r22
 a1e:	ac 01       	movw	r20, r24
 a20:	0a 2e       	mov	r0, r26
 a22:	06 94       	lsr	r0
 a24:	57 95       	ror	r21
 a26:	47 95       	ror	r20
 a28:	37 95       	ror	r19
 a2a:	27 95       	ror	r18
 a2c:	ba 95       	dec	r27
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__ultoa_invert+0xa2>
 a30:	62 0f       	add	r22, r18
 a32:	73 1f       	adc	r23, r19
 a34:	84 1f       	adc	r24, r20
 a36:	95 1f       	adc	r25, r21
 a38:	a0 1d       	adc	r26, r0
 a3a:	08 95       	ret

00000a3c <__prologue_saves__>:
 a3c:	2f 92       	push	r2
 a3e:	3f 92       	push	r3
 a40:	4f 92       	push	r4
 a42:	5f 92       	push	r5
 a44:	6f 92       	push	r6
 a46:	7f 92       	push	r7
 a48:	8f 92       	push	r8
 a4a:	9f 92       	push	r9
 a4c:	af 92       	push	r10
 a4e:	bf 92       	push	r11
 a50:	cf 92       	push	r12
 a52:	df 92       	push	r13
 a54:	ef 92       	push	r14
 a56:	ff 92       	push	r15
 a58:	0f 93       	push	r16
 a5a:	1f 93       	push	r17
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	cd b7       	in	r28, 0x3d	; 61
 a62:	de b7       	in	r29, 0x3e	; 62
 a64:	ca 1b       	sub	r28, r26
 a66:	db 0b       	sbc	r29, r27
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	f8 94       	cli
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	09 94       	ijmp

00000a74 <__epilogue_restores__>:
 a74:	2a 88       	ldd	r2, Y+18	; 0x12
 a76:	39 88       	ldd	r3, Y+17	; 0x11
 a78:	48 88       	ldd	r4, Y+16	; 0x10
 a7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a80:	8c 84       	ldd	r8, Y+12	; 0x0c
 a82:	9b 84       	ldd	r9, Y+11	; 0x0b
 a84:	aa 84       	ldd	r10, Y+10	; 0x0a
 a86:	b9 84       	ldd	r11, Y+9	; 0x09
 a88:	c8 84       	ldd	r12, Y+8	; 0x08
 a8a:	df 80       	ldd	r13, Y+7	; 0x07
 a8c:	ee 80       	ldd	r14, Y+6	; 0x06
 a8e:	fd 80       	ldd	r15, Y+5	; 0x05
 a90:	0c 81       	ldd	r16, Y+4	; 0x04
 a92:	1b 81       	ldd	r17, Y+3	; 0x03
 a94:	aa 81       	ldd	r26, Y+2	; 0x02
 a96:	b9 81       	ldd	r27, Y+1	; 0x01
 a98:	ce 0f       	add	r28, r30
 a9a:	d1 1d       	adc	r29, r1
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	ed 01       	movw	r28, r26
 aa8:	08 95       	ret

00000aaa <_exit>:
 aaa:	f8 94       	cli

00000aac <__stop_program>:
 aac:	ff cf       	rjmp	.-2      	; 0xaac <__stop_program>
